/* Generated By:JJTree&JavaCC: Do not edit this line. SyntaxTreeBuilderTokenManager.java */
package org.openrdf.query.parser.sparql.ast;

import java.io.StringReader;
import org.openrdf.model.URI;
import org.openrdf.model.vocabulary.RDF;
import org.openrdf.model.vocabulary.XMLSchema;
import org.openrdf.query.algebra.Compare.CompareOp;
import org.openrdf.query.algebra.MathExpr.MathOp;

/** Token Manager. */
public class SyntaxTreeBuilderTokenManager implements
		SyntaxTreeBuilderConstants {

	/** Debug output. */
	public java.io.PrintStream debugStream = System.out;

	/** Set debug output. */
	public void setDebugStream(java.io.PrintStream ds) {
		debugStream = ds;
	}

	private int jjStopAtPos(int pos, int kind) {
		jjmatchedKind = kind;
		jjmatchedPos = pos;
		return pos + 1;
	}

	private int jjMoveStringLiteralDfa0_0() {
		switch (curChar) {
		case 33:
			jjmatchedKind = 19;
			return jjMoveStringLiteralDfa1_0(0x4000L, 0x0L, 0x0L);
		case 38:
			return jjMoveStringLiteralDfa1_0(0x200000L, 0x0L, 0x0L);
		case 40:
			jjmatchedKind = 4;
			return jjMoveNfa_0(0, 0);
		case 41:
			jjmatchedKind = 5;
			return jjMoveNfa_0(0, 0);
		case 42:
			jjmatchedKind = 24;
			return jjMoveNfa_0(0, 0);
		case 43:
			jjmatchedKind = 22;
			return jjMoveNfa_0(0, 0);
		case 44:
			jjmatchedKind = 11;
			return jjMoveNfa_0(0, 0);
		case 45:
			jjmatchedKind = 23;
			return jjMoveNfa_0(0, 0);
		case 46:
			jjmatchedKind = 12;
			return jjMoveNfa_0(0, 0);
		case 47:
			jjmatchedKind = 26;
			return jjMoveNfa_0(0, 0);
		case 59:
			jjmatchedKind = 10;
			return jjMoveNfa_0(0, 0);
		case 60:
			jjmatchedKind = 16;
			return jjMoveStringLiteralDfa1_0(0x20000L, 0x0L, 0x0L);
		case 61:
			jjmatchedKind = 13;
			return jjMoveNfa_0(0, 0);
		case 62:
			jjmatchedKind = 15;
			return jjMoveStringLiteralDfa1_0(0x40000L, 0x0L, 0x0L);
		case 63:
			jjmatchedKind = 25;
			return jjMoveNfa_0(0, 0);
		case 65:
			return jjMoveStringLiteralDfa1_0(0x1024000000000L, 0x40000040000L,
					0x401L);
		case 66:
			return jjMoveStringLiteralDfa1_0(0x800200000000L, 0xa000081L, 0x0L);
		case 67:
			return jjMoveStringLiteralDfa1_0(0x1000000000L,
					0x400008c000004040L, 0xcL);
		case 68:
			return jjMoveStringLiteralDfa1_0(0x800200a000000000L,
					0x8002000000000000L, 0x260L);
		case 69:
			return jjMoveStringLiteralDfa1_0(0x400000000000000L,
					0x10000000000L, 0x0L);
		case 70:
			return jjMoveStringLiteralDfa1_0(0x100040000000000L,
					0x100001000000L, 0x0L);
		case 71:
			return jjMoveStringLiteralDfa1_0(0x20400000000000L, 0x100000L, 0x0L);
		case 72:
			return jjMoveStringLiteralDfa1_0(0x200000000000000L,
					0x4000000000000L, 0x0L);
		case 73:
			return jjMoveStringLiteralDfa1_0(0x0L, 0x1838L, 0x810L);
		case 76:
			return jjMoveStringLiteralDfa1_0(0x6004000000000000L,
					0x2000002000000000L, 0x0L);
		case 77:
			return jjMoveStringLiteralDfa1_0(0x80000000000000L,
					0x89000000030000L, 0x2L);
		case 78:
			return jjMoveStringLiteralDfa1_0(0x800080000000000L,
					0x400000002000L, 0x0L);
		case 79:
			return jjMoveStringLiteralDfa1_0(0x18200000000000L, 0x0L, 0x0L);
		case 80:
			return jjMoveStringLiteralDfa1_0(0x400000000L, 0x0L, 0x0L);
		case 82:
			return jjMoveStringLiteralDfa1_0(0x10000000000L, 0x220800400000L,
					0x0L);
		case 83:
			return jjMoveStringLiteralDfa1_0(0x1000000800000000L,
					0x1f100007e4288302L, 0x100L);
		case 84:
			return jjMoveStringLiteralDfa1_0(0x0L, 0x60000000800000L, 0x1000L);
		case 85:
			return jjMoveStringLiteralDfa1_0(0x40000000000000L, 0x1010000000L,
					0x2000L);
		case 87:
			return jjMoveStringLiteralDfa1_0(0x100000000000L, 0x0L, 0x80L);
		case 89:
			return jjMoveStringLiteralDfa1_0(0x0L, 0x800000000000L, 0x0L);
		case 91:
			jjmatchedKind = 8;
			return jjMoveNfa_0(0, 0);
		case 93:
			jjmatchedKind = 9;
			return jjMoveNfa_0(0, 0);
		case 94:
			jjmatchedKind = 28;
			return jjMoveStringLiteralDfa1_0(0x20000000L, 0x0L, 0x0L);
		case 97:
			jjmatchedKind = 32;
			return jjMoveStringLiteralDfa1_0(0x1024000000000L, 0x40000040000L,
					0x401L);
		case 98:
			return jjMoveStringLiteralDfa1_0(0x800200000000L, 0xa000081L, 0x0L);
		case 99:
			return jjMoveStringLiteralDfa1_0(0x1000000000L,
					0x400008c000004040L, 0xcL);
		case 100:
			return jjMoveStringLiteralDfa1_0(0x800200a000000000L,
					0x8002000000000000L, 0x260L);
		case 101:
			return jjMoveStringLiteralDfa1_0(0x400000000000000L,
					0x10000000000L, 0x0L);
		case 102:
			return jjMoveStringLiteralDfa1_0(0x100040000000000L,
					0x100001000000L, 0x0L);
		case 103:
			return jjMoveStringLiteralDfa1_0(0x20400000000000L, 0x100000L, 0x0L);
		case 104:
			return jjMoveStringLiteralDfa1_0(0x200000000000000L,
					0x4000000000000L, 0x0L);
		case 105:
			return jjMoveStringLiteralDfa1_0(0x0L, 0x1838L, 0x810L);
		case 108:
			return jjMoveStringLiteralDfa1_0(0x6004000000000000L,
					0x2000002000000000L, 0x0L);
		case 109:
			return jjMoveStringLiteralDfa1_0(0x80000000000000L,
					0x89000000030000L, 0x2L);
		case 110:
			return jjMoveStringLiteralDfa1_0(0x800080000000000L,
					0x400000002000L, 0x0L);
		case 111:
			return jjMoveStringLiteralDfa1_0(0x18200000000000L, 0x0L, 0x0L);
		case 112:
			return jjMoveStringLiteralDfa1_0(0x400000000L, 0x0L, 0x0L);
		case 114:
			return jjMoveStringLiteralDfa1_0(0x10000000000L, 0x220800400000L,
					0x0L);
		case 115:
			return jjMoveStringLiteralDfa1_0(0x1000000800000000L,
					0x1f100007e4288302L, 0x100L);
		case 116:
			return jjMoveStringLiteralDfa1_0(0x0L, 0x60000000800000L, 0x1000L);
		case 117:
			return jjMoveStringLiteralDfa1_0(0x40000000000000L, 0x1010000000L,
					0x2000L);
		case 119:
			return jjMoveStringLiteralDfa1_0(0x100000000000L, 0x0L, 0x80L);
		case 121:
			return jjMoveStringLiteralDfa1_0(0x0L, 0x800000000000L, 0x0L);
		case 123:
			jjmatchedKind = 6;
			return jjMoveNfa_0(0, 0);
		case 124:
			jjmatchedKind = 27;
			return jjMoveStringLiteralDfa1_0(0x100000L, 0x0L, 0x0L);
		case 125:
			jjmatchedKind = 7;
			return jjMoveNfa_0(0, 0);
		default:
			return jjMoveNfa_0(0, 0);
		}
	}

	private int jjMoveStringLiteralDfa1_0(long active0, long active1,
			long active2) {
		try {
			curChar = input_stream.readChar();
		} catch (java.io.IOException e) {
			return jjMoveNfa_0(0, 0);
		}
		switch (curChar) {
		case 38:
			if ((active0 & 0x200000L) != 0L) {
				jjmatchedKind = 21;
				jjmatchedPos = 1;
			}
			break;
		case 61:
			if ((active0 & 0x4000L) != 0L) {
				jjmatchedKind = 14;
				jjmatchedPos = 1;
			} else if ((active0 & 0x20000L) != 0L) {
				jjmatchedKind = 17;
				jjmatchedPos = 1;
			} else if ((active0 & 0x40000L) != 0L) {
				jjmatchedKind = 18;
				jjmatchedPos = 1;
			}
			break;
		case 65:
			return jjMoveStringLiteralDfa2_0(active0, 0xe200080200000000L,
					active1, 0x20200010a0002L, active2, 0x20L);
		case 66:
			return jjMoveStringLiteralDfa2_0(active0, 0L, active1,
					0x40000000000L, active2, 0L);
		case 67:
			return jjMoveStringLiteralDfa2_0(active0, 0L, active1,
					0x3000000000L, active2, 0L);
		case 68:
			return jjMoveStringLiteralDfa2_0(active0, 0L, active1,
					0x80000000000000L, active2, 0x1L);
		case 69:
			return jjMoveStringLiteralDfa2_0(active0, 0x2012800000000L,
					active1, 0x10880804600000L, active2, 0x240L);
		case 70:
			if ((active1 & 0x800L) != 0L) {
				jjmatchedKind = 75;
				jjmatchedPos = 1;
			}
			return jjMoveStringLiteralDfa2_0(active0, 0x8000000000000L,
					active1, 0L, active2, 0L);
		case 72:
			return jjMoveStringLiteralDfa2_0(active0, 0x100000000000L, active1,
					0x1f00000000000000L, active2, 0L);
		case 73:
			return jjMoveStringLiteralDfa2_0(active0, 0x184008000000000L,
					active1, 0x2800000a010000L, active2, 0x180L);
		case 76:
			return jjMoveStringLiteralDfa2_0(active0, 0L, active1,
					0x4000100000000000L, active2, 0x400L);
		case 78:
			if ((active1 & 0x1000L) != 0L) {
				jjmatchedKind = 76;
				jjmatchedPos = 1;
			}
			return jjMoveStringLiteralDfa2_0(active0, 0x40000000000000L,
					active1, 0x10010000080L, active2, 0x810L);
		case 79:
			if ((active2 & 0x1000L) != 0L) {
				jjmatchedKind = 140;
				jjmatchedPos = 1;
			}
			return jjMoveStringLiteralDfa2_0(active0, 0x800001000000000L,
					active1, 0x200560c000006041L, active2, 0x6L);
		case 80:
			return jjMoveStringLiteralDfa2_0(active0, 0x10000000000000L,
					active1, 0L, active2, 0L);
		case 82:
			return jjMoveStringLiteralDfa2_0(active0, 0x20640400000000L,
					active1, 0x8000000000900000L, active2, 0x8L);
		case 83:
			if ((active0 & 0x20000000000L) != 0L) {
				jjmatchedKind = 41;
				jjmatchedPos = 1;
			}
			return jjMoveStringLiteralDfa2_0(active0, 0x1004000000000L,
					active1, 0x38L, active2, 0x2000L);
		case 84:
			return jjMoveStringLiteralDfa2_0(active0, 0x1000000000000000L,
					active1, 0x7a0000300L, active2, 0L);
		case 85:
			return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x40008000L,
					active2, 0L);
		case 86:
			return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x40000L,
					active2, 0L);
		case 88:
			return jjMoveStringLiteralDfa2_0(active0, 0x400000000000000L,
					active1, 0L, active2, 0L);
		case 89:
			if ((active0 & 0x800000000000L) != 0L) {
				jjmatchedKind = 47;
				jjmatchedPos = 1;
			}
			break;
		case 90:
			if ((active1 & 0x40000000000000L) != 0L) {
				jjmatchedKind = 118;
				jjmatchedPos = 1;
			}
			break;
		case 94:
			if ((active0 & 0x20000000L) != 0L) {
				jjmatchedKind = 29;
				jjmatchedPos = 1;
			}
			break;
		case 97:
			return jjMoveStringLiteralDfa2_0(active0, 0xe200080200000000L,
					active1, 0x20200010a0002L, active2, 0x20L);
		case 98:
			return jjMoveStringLiteralDfa2_0(active0, 0L, active1,
					0x40000000000L, active2, 0L);
		case 99:
			return jjMoveStringLiteralDfa2_0(active0, 0L, active1,
					0x3000000000L, active2, 0L);
		case 100:
			return jjMoveStringLiteralDfa2_0(active0, 0L, active1,
					0x80000000000000L, active2, 0x1L);
		case 101:
			return jjMoveStringLiteralDfa2_0(active0, 0x2012800000000L,
					active1, 0x10880804600000L, active2, 0x240L);
		case 102:
			if ((active1 & 0x800L) != 0L) {
				jjmatchedKind = 75;
				jjmatchedPos = 1;
			}
			return jjMoveStringLiteralDfa2_0(active0, 0x8000000000000L,
					active1, 0L, active2, 0L);
		case 104:
			return jjMoveStringLiteralDfa2_0(active0, 0x100000000000L, active1,
					0x1f00000000000000L, active2, 0L);
		case 105:
			return jjMoveStringLiteralDfa2_0(active0, 0x184008000000000L,
					active1, 0x2800000a010000L, active2, 0x180L);
		case 108:
			return jjMoveStringLiteralDfa2_0(active0, 0L, active1,
					0x4000100000000000L, active2, 0x400L);
		case 110:
			if ((active1 & 0x1000L) != 0L) {
				jjmatchedKind = 76;
				jjmatchedPos = 1;
			}
			return jjMoveStringLiteralDfa2_0(active0, 0x40000000000000L,
					active1, 0x10010000080L, active2, 0x810L);
		case 111:
			if ((active2 & 0x1000L) != 0L) {
				jjmatchedKind = 140;
				jjmatchedPos = 1;
			}
			return jjMoveStringLiteralDfa2_0(active0, 0x800001000000000L,
					active1, 0x200560c000006041L, active2, 0x6L);
		case 112:
			return jjMoveStringLiteralDfa2_0(active0, 0x10000000000000L,
					active1, 0L, active2, 0L);
		case 114:
			return jjMoveStringLiteralDfa2_0(active0, 0x20640400000000L,
					active1, 0x8000000000900000L, active2, 0x8L);
		case 115:
			if ((active0 & 0x20000000000L) != 0L) {
				jjmatchedKind = 41;
				jjmatchedPos = 1;
			}
			return jjMoveStringLiteralDfa2_0(active0, 0x1004000000000L,
					active1, 0x38L, active2, 0x2000L);
		case 116:
			return jjMoveStringLiteralDfa2_0(active0, 0x1000000000000000L,
					active1, 0x7a0000300L, active2, 0L);
		case 117:
			return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x40008000L,
					active2, 0L);
		case 118:
			return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x40000L,
					active2, 0L);
		case 120:
			return jjMoveStringLiteralDfa2_0(active0, 0x400000000000000L,
					active1, 0L, active2, 0L);
		case 121:
			if ((active0 & 0x800000000000L) != 0L) {
				jjmatchedKind = 47;
				jjmatchedPos = 1;
			}
			break;
		case 122:
			if ((active1 & 0x40000000000000L) != 0L) {
				jjmatchedKind = 118;
				jjmatchedPos = 1;
			}
			break;
		case 124:
			if ((active0 & 0x100000L) != 0L) {
				jjmatchedKind = 20;
				jjmatchedPos = 1;
			}
			break;
		default:
			break;
		}
		return jjMoveNfa_0(0, 1);
	}

	private int jjMoveStringLiteralDfa2_0(long old0, long active0, long old1,
			long active1, long old2, long active2) {
		if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2)) == 0L)
			return jjMoveNfa_0(0, 1);
		try {
			curChar = input_stream.readChar();
		} catch (java.io.IOException e) {
			return jjMoveNfa_0(0, 1);
		}
		switch (curChar) {
		case 53:
			if ((active1 & 0x80000000000000L) != 0L) {
				jjmatchedKind = 119;
				jjmatchedPos = 2;
			}
			break;
		case 65:
			return jjMoveStringLiteralDfa3_0(active0, 0x20000000000000L,
					active1, 0x3f00803000000040L, active2, 0L);
		case 66:
			return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x40000008L,
					active2, 0L);
		case 67:
			if ((active0 & 0x1000000000000L) != 0L) {
				jjmatchedKind = 48;
				jjmatchedPos = 2;
			}
			return jjMoveStringLiteralDfa3_0(active0, 0L, active1,
					0x10010000000000L, active2, 0L);
		case 68:
			if ((active2 & 0x1L) != 0L) {
				jjmatchedKind = 128;
				jjmatchedPos = 2;
			}
			return jjMoveStringLiteralDfa3_0(active0, 0x210000000000L, active1,
					0x10000000L, active2, 0L);
		case 69:
			return jjMoveStringLiteralDfa3_0(active0, 0x100400000000L, active1,
					0x4000000000000000L, active2, 0x8L);
		case 70:
			return jjMoveStringLiteralDfa3_0(active0, 0x8000000000000L,
					active1, 0L, active2, 0x200L);
		case 71:
			if ((active1 & 0x40000L) != 0L) {
				jjmatchedKind = 82;
				jjmatchedPos = 2;
			}
			return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x400000L,
					active2, 0L);
		case 73:
			return jjMoveStringLiteralDfa3_0(active0, 0x440000000000000L,
					active1, 0x80000000000L, active2, 0x2000L);
		case 75:
			if ((active0 & 0x4000000000L) != 0L) {
				jjmatchedKind = 38;
				jjmatchedPos = 2;
			}
			break;
		case 76:
			if ((active2 & 0x400L) != 0L) {
				jjmatchedKind = 138;
				jjmatchedPos = 2;
			}
			return jjMoveStringLiteralDfa3_0(active0, 0x100000800000000L,
					active1, 0x1000010L, active2, 0x140L);
		case 77:
			if ((active1 & 0x8000L) != 0L) {
				jjmatchedKind = 79;
				jjmatchedPos = 2;
			}
			return jjMoveStringLiteralDfa3_0(active0, 0x4080000000000L,
					active1, 0x20000000080002L, active2, 0L);
		case 78:
			if ((active1 & 0x10000L) != 0L) {
				jjmatchedKind = 80;
				jjmatchedPos = 2;
			}
			return jjMoveStringLiteralDfa3_0(active0, 0x6080001000000000L,
					active1, 0x902c00a000020L, active2, 0L);
		case 79:
			return jjMoveStringLiteralDfa3_0(active0, 0x440000000000L, active1,
					0x8000100000100080L, active2, 0L);
		case 80:
			return jjMoveStringLiteralDfa3_0(active0, 0L, active1,
					0x800200000L, active2, 0x4L);
		case 82:
			if ((active0 & 0x1000000000000000L) != 0L) {
				jjmatchedKind = 60;
				jjmatchedPos = 2;
			}
			return jjMoveStringLiteralDfa3_0(active0, 0L, active1,
					0x7a4000300L, active2, 0L);
		case 83:
			if ((active1 & 0x40000000000L) != 0L) {
				jjmatchedKind = 106;
				jjmatchedPos = 2;
			}
			return jjMoveStringLiteralDfa3_0(active0, 0x200a200000000L,
					active1, 0L, active2, 0x10L);
		case 84:
			return jjMoveStringLiteralDfa3_0(active0, 0x8810000000000000L,
					active1, 0x2000L, active2, 0x8a0L);
		case 85:
			return jjMoveStringLiteralDfa3_0(active0, 0L, active1,
					0x4200000804001L, active2, 0L);
		case 86:
			return jjMoveStringLiteralDfa3_0(active0, 0x200000000000000L,
					active1, 0L, active2, 0x2L);
		case 87:
			if ((active1 & 0x400000000000L) != 0L) {
				jjmatchedKind = 110;
				jjmatchedPos = 2;
			}
			break;
		case 88:
			if ((active1 & 0x20000L) != 0L) {
				jjmatchedKind = 81;
				jjmatchedPos = 2;
			}
			break;
		case 89:
			if ((active1 & 0x2000000000000L) != 0L) {
				jjmatchedKind = 113;
				jjmatchedPos = 2;
			}
			break;
		case 97:
			return jjMoveStringLiteralDfa3_0(active0, 0x20000000000000L,
					active1, 0x3f00803000000040L, active2, 0L);
		case 98:
			return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x40000008L,
					active2, 0L);
		case 99:
			if ((active0 & 0x1000000000000L) != 0L) {
				jjmatchedKind = 48;
				jjmatchedPos = 2;
			}
			return jjMoveStringLiteralDfa3_0(active0, 0L, active1,
					0x10010000000000L, active2, 0L);
		case 100:
			if ((active2 & 0x1L) != 0L) {
				jjmatchedKind = 128;
				jjmatchedPos = 2;
			}
			return jjMoveStringLiteralDfa3_0(active0, 0x210000000000L, active1,
					0x10000000L, active2, 0L);
		case 101:
			return jjMoveStringLiteralDfa3_0(active0, 0x100400000000L, active1,
					0x4000000000000000L, active2, 0x8L);
		case 102:
			return jjMoveStringLiteralDfa3_0(active0, 0x8000000000000L,
					active1, 0L, active2, 0x200L);
		case 103:
			if ((active1 & 0x40000L) != 0L) {
				jjmatchedKind = 82;
				jjmatchedPos = 2;
			}
			return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x400000L,
					active2, 0L);
		case 105:
			return jjMoveStringLiteralDfa3_0(active0, 0x440000000000000L,
					active1, 0x80000000000L, active2, 0x2000L);
		case 107:
			if ((active0 & 0x4000000000L) != 0L) {
				jjmatchedKind = 38;
				jjmatchedPos = 2;
			}
			break;
		case 108:
			if ((active2 & 0x400L) != 0L) {
				jjmatchedKind = 138;
				jjmatchedPos = 2;
			}
			return jjMoveStringLiteralDfa3_0(active0, 0x100000800000000L,
					active1, 0x1000010L, active2, 0x140L);
		case 109:
			if ((active1 & 0x8000L) != 0L) {
				jjmatchedKind = 79;
				jjmatchedPos = 2;
			}
			return jjMoveStringLiteralDfa3_0(active0, 0x4080000000000L,
					active1, 0x20000000080002L, active2, 0L);
		case 110:
			if ((active1 & 0x10000L) != 0L) {
				jjmatchedKind = 80;
				jjmatchedPos = 2;
			}
			return jjMoveStringLiteralDfa3_0(active0, 0x6080001000000000L,
					active1, 0x902c00a000020L, active2, 0L);
		case 111:
			return jjMoveStringLiteralDfa3_0(active0, 0x440000000000L, active1,
					0x8000100000100080L, active2, 0L);
		case 112:
			return jjMoveStringLiteralDfa3_0(active0, 0L, active1,
					0x800200000L, active2, 0x4L);
		case 114:
			if ((active0 & 0x1000000000000000L) != 0L) {
				jjmatchedKind = 60;
				jjmatchedPos = 2;
			}
			return jjMoveStringLiteralDfa3_0(active0, 0L, active1,
					0x7a4000300L, active2, 0L);
		case 115:
			if ((active1 & 0x40000000000L) != 0L) {
				jjmatchedKind = 106;
				jjmatchedPos = 2;
			}
			return jjMoveStringLiteralDfa3_0(active0, 0x200a200000000L,
					active1, 0L, active2, 0x10L);
		case 116:
			return jjMoveStringLiteralDfa3_0(active0, 0x8810000000000000L,
					active1, 0x2000L, active2, 0x8a0L);
		case 117:
			return jjMoveStringLiteralDfa3_0(active0, 0L, active1,
					0x4200000804001L, active2, 0L);
		case 118:
			return jjMoveStringLiteralDfa3_0(active0, 0x200000000000000L,
					active1, 0L, active2, 0x2L);
		case 119:
			if ((active1 & 0x400000000000L) != 0L) {
				jjmatchedKind = 110;
				jjmatchedPos = 2;
			}
			break;
		case 120:
			if ((active1 & 0x20000L) != 0L) {
				jjmatchedKind = 81;
				jjmatchedPos = 2;
			}
			break;
		case 121:
			if ((active1 & 0x2000000000000L) != 0L) {
				jjmatchedKind = 113;
				jjmatchedPos = 2;
			}
			break;
		default:
			break;
		}
		return jjMoveNfa_0(0, 2);
	}

	private int jjMoveStringLiteralDfa3_0(long old0, long active0, long old1,
			long active1, long old2, long active2) {
		if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2)) == 0L)
			return jjMoveNfa_0(0, 2);
		try {
			curChar = input_stream.readChar();
		} catch (java.io.IOException e) {
			return jjMoveNfa_0(0, 2);
		}
		switch (curChar) {
		case 32:
			return jjMoveStringLiteralDfa4_0(active0, 0x800000000000000L,
					active1, 0x2000L, active2, 0L);
		case 49:
			if ((active1 & 0x100000000000000L) != 0L) {
				jjmatchedKind = 120;
				jjmatchedPos = 3;
			}
			break;
		case 50:
			return jjMoveStringLiteralDfa4_0(active0, 0L, active1,
					0x600000000000000L, active2, 0L);
		case 51:
			return jjMoveStringLiteralDfa4_0(active0, 0L, active1,
					0x800000000000000L, active2, 0L);
		case 53:
			return jjMoveStringLiteralDfa4_0(active0, 0L, active1,
					0x1000000000000000L, active2, 0L);
		case 65:
			if ((active2 & 0x20L) != 0L) {
				jjmatchedKind = 133;
				jjmatchedPos = 3;
			}
			return jjMoveStringLiteralDfa4_0(active0, 0x8000000000000000L,
					active1, 0x4000000400200000L, active2, 0x208L);
		case 66:
			return jjMoveStringLiteralDfa4_0(active0, 0L, active1,
					0x200000000L, active2, 0L);
		case 67:
			if ((active0 & 0x2000000000000L) != 0L) {
				jjmatchedKind = 49;
				jjmatchedPos = 3;
			}
			return jjMoveStringLiteralDfa4_0(active0, 0x2000000000L, active1,
					0x4000000000L, active2, 0L);
		case 68:
			if ((active1 & 0x2000000L) != 0L) {
				jjmatchedKind = 89;
				jjmatchedPos = 3;
			} else if ((active1 & 0x20000000000L) != 0L) {
				jjmatchedKind = 105;
				jjmatchedPos = 3;
			} else if ((active1 & 0x2000000000000000L) != 0L) {
				jjmatchedKind = 125;
				jjmatchedPos = 3;
			}
			return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x8000180L,
					active2, 0L);
		case 69:
			if ((active0 & 0x200000000L) != 0L) {
				jjmatchedKind = 33;
				jjmatchedPos = 3;
			} else if ((active1 & 0x800000L) != 0L) {
				jjmatchedKind = 87;
				jjmatchedPos = 3;
			} else if ((active2 & 0x2L) != 0L) {
				jjmatchedKind = 129;
				jjmatchedPos = 3;
			}
			return jjMoveStringLiteralDfa4_0(active0, 0x280800000000L, active1,
					0x20000110400002L, active2, 0x150L);
		case 70:
			return jjMoveStringLiteralDfa4_0(active0, 0x400000000L, active1,
					0L, active2, 0L);
		case 71:
			if ((active0 & 0x2000000000000000L) != 0L) {
				jjmatchedKind = 61;
				jjmatchedPos = 3;
			}
			return jjMoveStringLiteralDfa4_0(active0, 0x4000000000000000L,
					active1, 0L, active2, 0L);
		case 72:
			if ((active2 & 0x80L) != 0L) {
				jjmatchedKind = 135;
				jjmatchedPos = 3;
			}
			break;
		case 73:
			return jjMoveStringLiteralDfa4_0(active0, 0x214000000000000L,
					active1, 0x10L, active2, 0L);
		case 76:
			if ((active1 & 0x80000000000L) != 0L) {
				jjmatchedKind = 107;
				jjmatchedPos = 3;
			}
			return jjMoveStringLiteralDfa4_0(active0, 0L, active1,
					0x820000248L, active2, 0L);
		case 77:
			if ((active0 & 0x40000000000L) != 0L) {
				jjmatchedKind = 42;
				jjmatchedPos = 3;
			}
			break;
		case 78:
			return jjMoveStringLiteralDfa4_0(active0, 0L, active1,
					0x200000004001L, active2, 0x2000L);
		case 79:
			if ((active2 & 0x800L) != 0L) {
				jjmatchedKind = 139;
				jjmatchedPos = 3;
			}
			return jjMoveStringLiteralDfa4_0(active0, 0x40000000000000L,
					active1, 0x10110000000000L, active2, 0L);
		case 80:
			if ((active1 & 0x8000000000000000L) != 0L) {
				jjmatchedKind = 127;
				jjmatchedPos = 3;
			}
			return jjMoveStringLiteralDfa4_0(active0, 0x20000000000000L,
					active1, 0x80000L, active2, 0L);
		case 82:
			if ((active1 & 0x800000000000L) != 0L) {
				jjmatchedKind = 111;
				jjmatchedPos = 3;
			}
			return jjMoveStringLiteralDfa4_0(active0, 0x100000000000L, active1,
					0x4000000000000L, active2, 0L);
		case 83:
			return jjMoveStringLiteralDfa4_0(active0, 0x408001000000000L,
					active1, 0x30c1000000L, active2, 0L);
		case 84:
			return jjMoveStringLiteralDfa4_0(active0, 0x100008000000000L,
					active1, 0x1008000000000L, active2, 0L);
		case 85:
			return jjMoveStringLiteralDfa4_0(active0, 0x80410000000000L,
					active1, 0x8000000100020L, active2, 0L);
		case 86:
			return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x4000000L,
					active2, 0L);
		case 89:
			if ((active2 & 0x4L) != 0L) {
				jjmatchedKind = 130;
				jjmatchedPos = 3;
			}
			break;
		case 97:
			if ((active2 & 0x20L) != 0L) {
				jjmatchedKind = 133;
				jjmatchedPos = 3;
			}
			return jjMoveStringLiteralDfa4_0(active0, 0x8000000000000000L,
					active1, 0x4000000400200000L, active2, 0x208L);
		case 98:
			return jjMoveStringLiteralDfa4_0(active0, 0L, active1,
					0x200000000L, active2, 0L);
		case 99:
			if ((active0 & 0x2000000000000L) != 0L) {
				jjmatchedKind = 49;
				jjmatchedPos = 3;
			}
			return jjMoveStringLiteralDfa4_0(active0, 0x2000000000L, active1,
					0x4000000000L, active2, 0L);
		case 100:
			if ((active1 & 0x2000000L) != 0L) {
				jjmatchedKind = 89;
				jjmatchedPos = 3;
			} else if ((active1 & 0x20000000000L) != 0L) {
				jjmatchedKind = 105;
				jjmatchedPos = 3;
			} else if ((active1 & 0x2000000000000000L) != 0L) {
				jjmatchedKind = 125;
				jjmatchedPos = 3;
			}
			return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x8000180L,
					active2, 0L);
		case 101:
			if ((active0 & 0x200000000L) != 0L) {
				jjmatchedKind = 33;
				jjmatchedPos = 3;
			} else if ((active1 & 0x800000L) != 0L) {
				jjmatchedKind = 87;
				jjmatchedPos = 3;
			} else if ((active2 & 0x2L) != 0L) {
				jjmatchedKind = 129;
				jjmatchedPos = 3;
			}
			return jjMoveStringLiteralDfa4_0(active0, 0x280800000000L, active1,
					0x20000110400002L, active2, 0x150L);
		case 102:
			return jjMoveStringLiteralDfa4_0(active0, 0x400000000L, active1,
					0L, active2, 0L);
		case 103:
			if ((active0 & 0x2000000000000000L) != 0L) {
				jjmatchedKind = 61;
				jjmatchedPos = 3;
			}
			return jjMoveStringLiteralDfa4_0(active0, 0x4000000000000000L,
					active1, 0L, active2, 0L);
		case 104:
			if ((active2 & 0x80L) != 0L) {
				jjmatchedKind = 135;
				jjmatchedPos = 3;
			}
			break;
		case 105:
			return jjMoveStringLiteralDfa4_0(active0, 0x214000000000000L,
					active1, 0x10L, active2, 0L);
		case 108:
			if ((active1 & 0x80000000000L) != 0L) {
				jjmatchedKind = 107;
				jjmatchedPos = 3;
			}
			return jjMoveStringLiteralDfa4_0(active0, 0L, active1,
					0x820000248L, active2, 0L);
		case 109:
			if ((active0 & 0x40000000000L) != 0L) {
				jjmatchedKind = 42;
				jjmatchedPos = 3;
			}
			break;
		case 110:
			return jjMoveStringLiteralDfa4_0(active0, 0L, active1,
					0x200000004001L, active2, 0x2000L);
		case 111:
			if ((active2 & 0x800L) != 0L) {
				jjmatchedKind = 139;
				jjmatchedPos = 3;
			}
			return jjMoveStringLiteralDfa4_0(active0, 0x40000000000000L,
					active1, 0x10110000000000L, active2, 0L);
		case 112:
			if ((active1 & 0x8000000000000000L) != 0L) {
				jjmatchedKind = 127;
				jjmatchedPos = 3;
			}
			return jjMoveStringLiteralDfa4_0(active0, 0x20000000000000L,
					active1, 0x80000L, active2, 0L);
		case 114:
			if ((active1 & 0x800000000000L) != 0L) {
				jjmatchedKind = 111;
				jjmatchedPos = 3;
			}
			return jjMoveStringLiteralDfa4_0(active0, 0x100000000000L, active1,
					0x4000000000000L, active2, 0L);
		case 115:
			return jjMoveStringLiteralDfa4_0(active0, 0x408001000000000L,
					active1, 0x30c1000000L, active2, 0L);
		case 116:
			return jjMoveStringLiteralDfa4_0(active0, 0x100008000000000L,
					active1, 0x1008000000000L, active2, 0L);
		case 117:
			return jjMoveStringLiteralDfa4_0(active0, 0x80410000000000L,
					active1, 0x8000000100020L, active2, 0L);
		case 118:
			return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x4000000L,
					active2, 0L);
		case 121:
			if ((active2 & 0x4L) != 0L) {
				jjmatchedKind = 130;
				jjmatchedPos = 3;
			}
			break;
		default:
			break;
		}
		return jjMoveNfa_0(0, 3);
	}

	private int jjMoveStringLiteralDfa4_0(long old0, long active0, long old1,
			long active1, long old2, long active2) {
		if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2)) == 0L)
			return jjMoveNfa_0(0, 3);
		try {
			curChar = input_stream.readChar();
		} catch (java.io.IOException e) {
			return jjMoveNfa_0(0, 3);
		}
		switch (curChar) {
		case 49:
			return jjMoveStringLiteralDfa5_0(active0, 0L, active1,
					0x1000000000000000L, active2, 0L);
		case 50:
			return jjMoveStringLiteralDfa5_0(active0, 0L, active1,
					0x200000000000000L, active2, 0L);
		case 53:
			return jjMoveStringLiteralDfa5_0(active0, 0L, active1,
					0x400000000000000L, active2, 0L);
		case 56:
			return jjMoveStringLiteralDfa5_0(active0, 0L, active1,
					0x800000000000000L, active2, 0L);
		case 65:
			return jjMoveStringLiteralDfa5_0(active0, 0L, active1,
					0xc800000208L, active2, 0L);
		case 67:
			return jjMoveStringLiteralDfa5_0(active0, 0x10800000000L, active1,
					0L, active2, 0L);
		case 68:
			if ((active0 & 0x80000000000L) != 0L) {
				jjmatchedKind = 43;
				jjmatchedPos = 4;
			} else if ((active1 & 0x1L) != 0L) {
				jjmatchedKind = 64;
				jjmatchedPos = 4;
			} else if ((active1 & 0x200000000000L) != 0L) {
				jjmatchedKind = 109;
				jjmatchedPos = 4;
			}
			return jjMoveStringLiteralDfa5_0(active0, 0L, active1,
					0x10000000000L, active2, 0L);
		case 69:
			if ((active0 & 0x100000000000L) != 0L) {
				jjmatchedKind = 44;
				jjmatchedPos = 4;
			} else if ((active1 & 0x80L) != 0L) {
				jjmatchedKind = 71;
				jjmatchedPos = 4;
			} else if ((active1 & 0x1000000L) != 0L) {
				jjmatchedKind = 88;
				jjmatchedPos = 4;
			} else if ((active1 & 0x1000000000L) != 0L) {
				jjmatchedKind = 100;
				jjmatchedPos = 4;
			} else if ((active1 & 0x2000000000L) != 0L) {
				jjmatchedKind = 101;
				jjmatchedPos = 4;
			}
			return jjMoveStringLiteralDfa5_0(active0, 0x908000000000000L,
					active1, 0x220000040L, active2, 0L);
		case 70:
			if ((active1 & 0x10000000L) != 0L) {
				jjmatchedKind = 92;
				jjmatchedPos = 4;
			}
			return jjMoveStringLiteralDfa5_0(active0, 0L, active1,
					0x400000000L, active2, 0L);
		case 71:
			if ((active2 & 0x2000L) != 0L) {
				jjmatchedKind = 141;
				jjmatchedPos = 4;
			}
			break;
		case 72:
			if ((active0 & 0x20000000000000L) != 0L) {
				jjmatchedKind = 53;
				jjmatchedPos = 4;
			} else if ((active1 & 0x1000000000000L) != 0L) {
				jjmatchedKind = 112;
				jjmatchedPos = 4;
			}
			break;
		case 73:
			return jjMoveStringLiteralDfa5_0(active0, 0x8400000000L, active1,
					0xc002000L, active2, 0L);
		case 76:
			return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x80000L,
					active2, 0L);
		case 77:
			return jjMoveStringLiteralDfa5_0(active0, 0x4000000000000000L,
					active1, 0x20L, active2, 0L);
		case 78:
			if ((active0 & 0x40000000000000L) != 0L) {
				jjmatchedKind = 54;
				jjmatchedPos = 4;
			}
			return jjMoveStringLiteralDfa5_0(active0, 0x200000000000000L,
					active1, 0x10000100000000L, active2, 0x100L);
		case 79:
			return jjMoveStringLiteralDfa5_0(active0, 0x10000000000000L,
					active1, 0L, active2, 0L);
		case 80:
			if ((active0 & 0x400000000000L) != 0L) {
				jjmatchedKind = 46;
				jjmatchedPos = 4;
			}
			return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x100000L,
					active2, 0L);
		case 82:
			if ((active0 & 0x200000000000L) != 0L) {
				jjmatchedKind = 45;
				jjmatchedPos = 4;
			} else if ((active1 & 0x100000000000L) != 0L) {
				jjmatchedKind = 108;
				jjmatchedPos = 4;
			} else if ((active1 & 0x4000000000000000L) != 0L) {
				jjmatchedKind = 126;
				jjmatchedPos = 4;
			}
			return jjMoveStringLiteralDfa5_0(active0, 0x2000000000L, active1,
					0x200000L, active2, 0x10L);
		case 83:
			if ((active0 & 0x80000000000000L) != 0L) {
				jjmatchedKind = 55;
				jjmatchedPos = 4;
			} else if ((active1 & 0x4000000000000L) != 0L) {
				jjmatchedKind = 114;
				jjmatchedPos = 4;
			}
			break;
		case 84:
			if ((active0 & 0x4000000000000L) != 0L) {
				jjmatchedKind = 50;
				jjmatchedPos = 4;
			} else if ((active1 & 0x100L) != 0L) {
				jjmatchedKind = 72;
				jjmatchedPos = 4;
			} else if ((active1 & 0x4000L) != 0L) {
				jjmatchedKind = 78;
				jjmatchedPos = 4;
			}
			return jjMoveStringLiteralDfa5_0(active0, 0x8400001000000000L,
					active1, 0x80000c0000012L, active2, 0x48L);
		case 85:
			return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0L, active2,
					0x200L);
		case 88:
			if ((active1 & 0x400000L) != 0L) {
				jjmatchedKind = 86;
				jjmatchedPos = 4;
			}
			break;
		case 90:
			return jjMoveStringLiteralDfa5_0(active0, 0L, active1,
					0x20000000000000L, active2, 0L);
		case 97:
			return jjMoveStringLiteralDfa5_0(active0, 0L, active1,
					0xc800000208L, active2, 0L);
		case 99:
			return jjMoveStringLiteralDfa5_0(active0, 0x10800000000L, active1,
					0L, active2, 0L);
		case 100:
			if ((active0 & 0x80000000000L) != 0L) {
				jjmatchedKind = 43;
				jjmatchedPos = 4;
			} else if ((active1 & 0x1L) != 0L) {
				jjmatchedKind = 64;
				jjmatchedPos = 4;
			} else if ((active1 & 0x200000000000L) != 0L) {
				jjmatchedKind = 109;
				jjmatchedPos = 4;
			}
			return jjMoveStringLiteralDfa5_0(active0, 0L, active1,
					0x10000000000L, active2, 0L);
		case 101:
			if ((active0 & 0x100000000000L) != 0L) {
				jjmatchedKind = 44;
				jjmatchedPos = 4;
			} else if ((active1 & 0x80L) != 0L) {
				jjmatchedKind = 71;
				jjmatchedPos = 4;
			} else if ((active1 & 0x1000000L) != 0L) {
				jjmatchedKind = 88;
				jjmatchedPos = 4;
			} else if ((active1 & 0x1000000000L) != 0L) {
				jjmatchedKind = 100;
				jjmatchedPos = 4;
			} else if ((active1 & 0x2000000000L) != 0L) {
				jjmatchedKind = 101;
				jjmatchedPos = 4;
			}
			return jjMoveStringLiteralDfa5_0(active0, 0x908000000000000L,
					active1, 0x220000040L, active2, 0L);
		case 102:
			if ((active1 & 0x10000000L) != 0L) {
				jjmatchedKind = 92;
				jjmatchedPos = 4;
			}
			return jjMoveStringLiteralDfa5_0(active0, 0L, active1,
					0x400000000L, active2, 0L);
		case 103:
			if ((active2 & 0x2000L) != 0L) {
				jjmatchedKind = 141;
				jjmatchedPos = 4;
			}
			break;
		case 104:
			if ((active0 & 0x20000000000000L) != 0L) {
				jjmatchedKind = 53;
				jjmatchedPos = 4;
			} else if ((active1 & 0x1000000000000L) != 0L) {
				jjmatchedKind = 112;
				jjmatchedPos = 4;
			}
			break;
		case 105:
			return jjMoveStringLiteralDfa5_0(active0, 0x8400000000L, active1,
					0xc002000L, active2, 0L);
		case 108:
			return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x80000L,
					active2, 0L);
		case 109:
			return jjMoveStringLiteralDfa5_0(active0, 0x4000000000000000L,
					active1, 0x20L, active2, 0L);
		case 110:
			if ((active0 & 0x40000000000000L) != 0L) {
				jjmatchedKind = 54;
				jjmatchedPos = 4;
			}
			return jjMoveStringLiteralDfa5_0(active0, 0x200000000000000L,
					active1, 0x10000100000000L, active2, 0x100L);
		case 111:
			return jjMoveStringLiteralDfa5_0(active0, 0x10000000000000L,
					active1, 0L, active2, 0L);
		case 112:
			if ((active0 & 0x400000000000L) != 0L) {
				jjmatchedKind = 46;
				jjmatchedPos = 4;
			}
			return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x100000L,
					active2, 0L);
		case 114:
			if ((active0 & 0x200000000000L) != 0L) {
				jjmatchedKind = 45;
				jjmatchedPos = 4;
			} else if ((active1 & 0x100000000000L) != 0L) {
				jjmatchedKind = 108;
				jjmatchedPos = 4;
			} else if ((active1 & 0x4000000000000000L) != 0L) {
				jjmatchedKind = 126;
				jjmatchedPos = 4;
			}
			return jjMoveStringLiteralDfa5_0(active0, 0x2000000000L, active1,
					0x200000L, active2, 0x10L);
		case 115:
			if ((active0 & 0x80000000000000L) != 0L) {
				jjmatchedKind = 55;
				jjmatchedPos = 4;
			} else if ((active1 & 0x4000000000000L) != 0L) {
				jjmatchedKind = 114;
				jjmatchedPos = 4;
			}
			break;
		case 116:
			if ((active0 & 0x4000000000000L) != 0L) {
				jjmatchedKind = 50;
				jjmatchedPos = 4;
			} else if ((active1 & 0x100L) != 0L) {
				jjmatchedKind = 72;
				jjmatchedPos = 4;
			} else if ((active1 & 0x4000L) != 0L) {
				jjmatchedKind = 78;
				jjmatchedPos = 4;
			}
			return jjMoveStringLiteralDfa5_0(active0, 0x8400001000000000L,
					active1, 0x80000c0000012L, active2, 0x48L);
		case 117:
			return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0L, active2,
					0x200L);
		case 120:
			if ((active1 & 0x400000L) != 0L) {
				jjmatchedKind = 86;
				jjmatchedPos = 4;
			}
			break;
		case 122:
			return jjMoveStringLiteralDfa5_0(active0, 0L, active1,
					0x20000000000000L, active2, 0L);
		default:
			break;
		}
		return jjMoveNfa_0(0, 4);
	}

	private int jjMoveStringLiteralDfa5_0(long old0, long active0, long old1,
			long active1, long old2, long active2) {
		if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2)) == 0L)
			return jjMoveNfa_0(0, 4);
		try {
			curChar = input_stream.readChar();
		} catch (java.io.IOException e) {
			return jjMoveNfa_0(0, 4);
		}
		switch (curChar) {
		case 50:
			if ((active1 & 0x1000000000000000L) != 0L) {
				jjmatchedKind = 124;
				jjmatchedPos = 5;
			}
			break;
		case 52:
			if ((active1 & 0x200000000000000L) != 0L) {
				jjmatchedKind = 121;
				jjmatchedPos = 5;
			} else if ((active1 & 0x800000000000000L) != 0L) {
				jjmatchedKind = 123;
				jjmatchedPos = 5;
			}
			break;
		case 54:
			if ((active1 & 0x400000000000000L) != 0L) {
				jjmatchedKind = 122;
				jjmatchedPos = 5;
			}
			break;
		case 65:
			return jjMoveStringLiteralDfa6_0(active0, 0x4000000000000000L,
					active1, 0x80200000L, active2, 0L);
		case 67:
			return jjMoveStringLiteralDfa6_0(active0, 0L, active1,
					0x804000000L, active2, 0L);
		case 68:
			return jjMoveStringLiteralDfa6_0(active0, 0L, active1,
					0x10000100000000L, active2, 0L);
		case 69:
			if ((active1 & 0x80000L) != 0L) {
				jjmatchedKind = 83;
				jjmatchedPos = 5;
			} else if ((active2 & 0x8L) != 0L) {
				jjmatchedKind = 131;
				jjmatchedPos = 5;
			} else if ((active2 & 0x40L) != 0L) {
				jjmatchedKind = 134;
				jjmatchedPos = 5;
			}
			return jjMoveStringLiteralDfa6_0(active0, 0x10000000000L, active1,
					0x8010000000032L, active2, 0L);
		case 70:
			return jjMoveStringLiteralDfa6_0(active0, 0L, active1,
					0x200000000L, active2, 0L);
		case 71:
			if ((active0 & 0x200000000000000L) != 0L) {
				jjmatchedKind = 57;
				jjmatchedPos = 5;
			}
			break;
		case 73:
			return jjMoveStringLiteralDfa6_0(active0, 0x2000000000L, active1,
					0x8000000000L, active2, 0L);
		case 76:
			return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0L, active2,
					0x200L);
		case 78:
			if ((active1 & 0x2000L) != 0L) {
				jjmatchedKind = 77;
				jjmatchedPos = 5;
			} else if ((active1 & 0x20000000L) != 0L) {
				jjmatchedKind = 93;
				jjmatchedPos = 5;
			}
			return jjMoveStringLiteralDfa6_0(active0, 0x10008000000000L,
					active1, 0x8000208L, active2, 0L);
		case 79:
			return jjMoveStringLiteralDfa6_0(active0, 0L, active1,
					0x20000000000000L, active2, 0L);
		case 82:
			if ((active0 & 0x100000000000000L) != 0L) {
				jjmatchedKind = 56;
				jjmatchedPos = 5;
			} else if ((active1 & 0x40000000L) != 0L) {
				jjmatchedKind = 94;
				jjmatchedPos = 5;
			}
			return jjMoveStringLiteralDfa6_0(active0, 0x1000000000L, active1,
					0L, active2, 0L);
		case 83:
			if ((active0 & 0x400000000000000L) != 0L) {
				jjmatchedKind = 58;
				jjmatchedPos = 5;
			}
			return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x40L,
					active2, 0L);
		case 84:
			if ((active0 & 0x800000000L) != 0L) {
				jjmatchedKind = 35;
				jjmatchedPos = 5;
			} else if ((active0 & 0x8000000000000L) != 0L) {
				jjmatchedKind = 51;
				jjmatchedPos = 5;
			} else if ((active1 & 0x4000000000L) != 0L) {
				jjmatchedKind = 102;
				jjmatchedPos = 5;
			} else if ((active2 & 0x10L) != 0L) {
				jjmatchedKind = 132;
				jjmatchedPos = 5;
			} else if ((active2 & 0x100L) != 0L) {
				jjmatchedKind = 136;
				jjmatchedPos = 5;
			}
			return jjMoveStringLiteralDfa6_0(active0, 0L, active1,
					0x400000000L, active2, 0L);
		case 88:
			if ((active0 & 0x400000000L) != 0L) {
				jjmatchedKind = 34;
				jjmatchedPos = 5;
			}
			return jjMoveStringLiteralDfa6_0(active0, 0x800000000000000L,
					active1, 0L, active2, 0L);
		case 89:
			return jjMoveStringLiteralDfa6_0(active0, 0x8000000000000000L,
					active1, 0L, active2, 0L);
		case 95:
			return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x100000L,
					active2, 0L);
		case 97:
			return jjMoveStringLiteralDfa6_0(active0, 0x4000000000000000L,
					active1, 0x80200000L, active2, 0L);
		case 99:
			return jjMoveStringLiteralDfa6_0(active0, 0L, active1,
					0x804000000L, active2, 0L);
		case 100:
			return jjMoveStringLiteralDfa6_0(active0, 0L, active1,
					0x10000100000000L, active2, 0L);
		case 101:
			if ((active1 & 0x80000L) != 0L) {
				jjmatchedKind = 83;
				jjmatchedPos = 5;
			} else if ((active2 & 0x8L) != 0L) {
				jjmatchedKind = 131;
				jjmatchedPos = 5;
			} else if ((active2 & 0x40L) != 0L) {
				jjmatchedKind = 134;
				jjmatchedPos = 5;
			}
			return jjMoveStringLiteralDfa6_0(active0, 0x10000000000L, active1,
					0x8010000000032L, active2, 0L);
		case 102:
			return jjMoveStringLiteralDfa6_0(active0, 0L, active1,
					0x200000000L, active2, 0L);
		case 103:
			if ((active0 & 0x200000000000000L) != 0L) {
				jjmatchedKind = 57;
				jjmatchedPos = 5;
			}
			break;
		case 105:
			return jjMoveStringLiteralDfa6_0(active0, 0x2000000000L, active1,
					0x8000000000L, active2, 0L);
		case 108:
			return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0L, active2,
					0x200L);
		case 110:
			if ((active1 & 0x2000L) != 0L) {
				jjmatchedKind = 77;
				jjmatchedPos = 5;
			} else if ((active1 & 0x20000000L) != 0L) {
				jjmatchedKind = 93;
				jjmatchedPos = 5;
			}
			return jjMoveStringLiteralDfa6_0(active0, 0x10008000000000L,
					active1, 0x8000208L, active2, 0L);
		case 111:
			return jjMoveStringLiteralDfa6_0(active0, 0L, active1,
					0x20000000000000L, active2, 0L);
		case 114:
			if ((active0 & 0x100000000000000L) != 0L) {
				jjmatchedKind = 56;
				jjmatchedPos = 5;
			} else if ((active1 & 0x40000000L) != 0L) {
				jjmatchedKind = 94;
				jjmatchedPos = 5;
			}
			return jjMoveStringLiteralDfa6_0(active0, 0x1000000000L, active1,
					0L, active2, 0L);
		case 115:
			if ((active0 & 0x400000000000000L) != 0L) {
				jjmatchedKind = 58;
				jjmatchedPos = 5;
			}
			return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x40L,
					active2, 0L);
		case 116:
			if ((active0 & 0x800000000L) != 0L) {
				jjmatchedKind = 35;
				jjmatchedPos = 5;
			} else if ((active0 & 0x8000000000000L) != 0L) {
				jjmatchedKind = 51;
				jjmatchedPos = 5;
			} else if ((active1 & 0x4000000000L) != 0L) {
				jjmatchedKind = 102;
				jjmatchedPos = 5;
			} else if ((active2 & 0x10L) != 0L) {
				jjmatchedKind = 132;
				jjmatchedPos = 5;
			} else if ((active2 & 0x100L) != 0L) {
				jjmatchedKind = 136;
				jjmatchedPos = 5;
			}
			return jjMoveStringLiteralDfa6_0(active0, 0L, active1,
					0x400000000L, active2, 0L);
		case 120:
			if ((active0 & 0x400000000L) != 0L) {
				jjmatchedKind = 34;
				jjmatchedPos = 5;
			}
			return jjMoveStringLiteralDfa6_0(active0, 0x800000000000000L,
					active1, 0L, active2, 0L);
		case 121:
			return jjMoveStringLiteralDfa6_0(active0, 0x8000000000000000L,
					active1, 0L, active2, 0L);
		default:
			break;
		}
		return jjMoveNfa_0(0, 5);
	}

	private int jjMoveStringLiteralDfa6_0(long old0, long active0, long old1,
			long active1, long old2, long active2) {
		if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2)) == 0L)
			return jjMoveNfa_0(0, 5);
		try {
			curChar = input_stream.readChar();
		} catch (java.io.IOException e) {
			return jjMoveNfa_0(0, 5);
		}
		switch (curChar) {
		case 65:
			return jjMoveStringLiteralDfa7_0(active0, 0x10000000000000L,
					active1, 0L, active2, 0L);
		case 66:
			return jjMoveStringLiteralDfa7_0(active0, 0x2000000000L, active1,
					0L, active2, 0L);
		case 67:
			return jjMoveStringLiteralDfa7_0(active0, 0x8000000000L, active1,
					0x100040L, active2, 0L);
		case 68:
			if ((active0 & 0x10000000000L) != 0L) {
				jjmatchedKind = 40;
				jjmatchedPos = 6;
			}
			break;
		case 69:
			if ((active1 & 0x4000000L) != 0L) {
				jjmatchedKind = 90;
				jjmatchedPos = 6;
			} else if ((active1 & 0x800000000L) != 0L) {
				jjmatchedKind = 99;
				jjmatchedPos = 6;
			}
			return jjMoveStringLiteralDfa7_0(active0, 0L, active1,
					0x400000000L, active2, 0L);
		case 71:
			if ((active1 & 0x200L) != 0L) {
				jjmatchedKind = 73;
				jjmatchedPos = 6;
			}
			return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x8000000L,
					active2, 0L);
		case 73:
			return jjMoveStringLiteralDfa7_0(active0, 0x800000000000000L,
					active1, 0L, active2, 0L);
		case 75:
			if ((active1 & 0x8L) != 0L) {
				jjmatchedKind = 67;
				jjmatchedPos = 6;
			}
			break;
		case 78:
			return jjMoveStringLiteralDfa7_0(active0, 0L, active1,
					0x20008000000000L, active2, 0L);
		case 79:
			return jjMoveStringLiteralDfa7_0(active0, 0L, active1,
					0x200000000L, active2, 0L);
		case 80:
			return jjMoveStringLiteralDfa7_0(active0, 0x8000000000000000L,
					active1, 0L, active2, 0L);
		case 82:
			return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x80000032L,
					active2, 0L);
		case 83:
			if ((active1 & 0x100000000L) != 0L) {
				jjmatchedKind = 96;
				jjmatchedPos = 6;
			} else if ((active1 & 0x8000000000000L) != 0L) {
				jjmatchedKind = 115;
				jjmatchedPos = 6;
			} else if ((active1 & 0x10000000000000L) != 0L) {
				jjmatchedKind = 116;
				jjmatchedPos = 6;
			}
			break;
		case 84:
			if ((active2 & 0x200L) != 0L) {
				jjmatchedKind = 137;
				jjmatchedPos = 6;
			}
			return jjMoveStringLiteralDfa7_0(active0, 0x4000000000000000L,
					active1, 0x200000L, active2, 0L);
		case 85:
			return jjMoveStringLiteralDfa7_0(active0, 0x1000000000L, active1,
					0L, active2, 0L);
		case 95:
			return jjMoveStringLiteralDfa7_0(active0, 0L, active1,
					0x10000000000L, active2, 0L);
		case 97:
			return jjMoveStringLiteralDfa7_0(active0, 0x10000000000000L,
					active1, 0L, active2, 0L);
		case 98:
			return jjMoveStringLiteralDfa7_0(active0, 0x2000000000L, active1,
					0L, active2, 0L);
		case 99:
			return jjMoveStringLiteralDfa7_0(active0, 0x8000000000L, active1,
					0x100040L, active2, 0L);
		case 100:
			if ((active0 & 0x10000000000L) != 0L) {
				jjmatchedKind = 40;
				jjmatchedPos = 6;
			}
			break;
		case 101:
			if ((active1 & 0x4000000L) != 0L) {
				jjmatchedKind = 90;
				jjmatchedPos = 6;
			} else if ((active1 & 0x800000000L) != 0L) {
				jjmatchedKind = 99;
				jjmatchedPos = 6;
			}
			return jjMoveStringLiteralDfa7_0(active0, 0L, active1,
					0x400000000L, active2, 0L);
		case 103:
			if ((active1 & 0x200L) != 0L) {
				jjmatchedKind = 73;
				jjmatchedPos = 6;
			}
			return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x8000000L,
					active2, 0L);
		case 105:
			return jjMoveStringLiteralDfa7_0(active0, 0x800000000000000L,
					active1, 0L, active2, 0L);
		case 107:
			if ((active1 & 0x8L) != 0L) {
				jjmatchedKind = 67;
				jjmatchedPos = 6;
			}
			break;
		case 110:
			return jjMoveStringLiteralDfa7_0(active0, 0L, active1,
					0x20008000000000L, active2, 0L);
		case 111:
			return jjMoveStringLiteralDfa7_0(active0, 0L, active1,
					0x200000000L, active2, 0L);
		case 112:
			return jjMoveStringLiteralDfa7_0(active0, 0x8000000000000000L,
					active1, 0L, active2, 0L);
		case 114:
			return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x80000032L,
					active2, 0L);
		case 115:
			if ((active1 & 0x100000000L) != 0L) {
				jjmatchedKind = 96;
				jjmatchedPos = 6;
			} else if ((active1 & 0x8000000000000L) != 0L) {
				jjmatchedKind = 115;
				jjmatchedPos = 6;
			} else if ((active1 & 0x10000000000000L) != 0L) {
				jjmatchedKind = 116;
				jjmatchedPos = 6;
			}
			break;
		case 116:
			if ((active2 & 0x200L) != 0L) {
				jjmatchedKind = 137;
				jjmatchedPos = 6;
			}
			return jjMoveStringLiteralDfa7_0(active0, 0x4000000000000000L,
					active1, 0x200000L, active2, 0L);
		case 117:
			return jjMoveStringLiteralDfa7_0(active0, 0x1000000000L, active1,
					0L, active2, 0L);
		default:
			break;
		}
		return jjMoveNfa_0(0, 6);
	}

	private int jjMoveStringLiteralDfa7_0(long old0, long active0, long old1,
			long active1, long old2, long active2) {
		if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2)) == 0L)
			return jjMoveNfa_0(0, 6);
		try {
			curChar = input_stream.readChar();
		} catch (java.io.IOException e) {
			return jjMoveNfa_0(0, 6);
		}
		switch (curChar) {
		case 65:
			return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0x10L);
		case 67:
			return jjMoveStringLiteralDfa8_0(active0, 0x4000001000000000L,
					active1, 0L);
		case 69:
			if ((active0 & 0x2000000000L) != 0L) {
				jjmatchedKind = 37;
				jjmatchedPos = 7;
			} else if ((active0 & 0x8000000000000000L) != 0L) {
				jjmatchedKind = 63;
				jjmatchedPos = 7;
			} else if ((active1 & 0x40L) != 0L) {
				jjmatchedKind = 70;
				jjmatchedPos = 7;
			} else if ((active1 & 0x20000000000000L) != 0L) {
				jjmatchedKind = 117;
				jjmatchedPos = 7;
			}
			break;
		case 70:
			return jjMoveStringLiteralDfa8_0(active0, 0L, active1,
					0x10000000000L);
		case 73:
			return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0x20L);
		case 76:
			if ((active0 & 0x10000000000000L) != 0L) {
				jjmatchedKind = 52;
				jjmatchedPos = 7;
			}
			break;
		case 77:
			if ((active1 & 0x2L) != 0L) {
				jjmatchedKind = 65;
				jjmatchedPos = 7;
			}
			break;
		case 79:
			return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0x300000L);
		case 82:
			if ((active1 & 0x400000000L) != 0L) {
				jjmatchedKind = 98;
				jjmatchedPos = 7;
			}
			return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0x200000000L);
		case 83:
			if ((active1 & 0x8000000L) != 0L) {
				jjmatchedKind = 91;
				jjmatchedPos = 7;
			} else if ((active1 & 0x8000000000L) != 0L) {
				jjmatchedKind = 103;
				jjmatchedPos = 7;
			}
			return jjMoveStringLiteralDfa8_0(active0, 0x800000000000000L,
					active1, 0L);
		case 84:
			if ((active0 & 0x8000000000L) != 0L) {
				jjmatchedKind = 39;
				jjmatchedPos = 7;
			}
			return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0x80000000L);
		case 97:
			return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0x10L);
		case 99:
			return jjMoveStringLiteralDfa8_0(active0, 0x4000001000000000L,
					active1, 0L);
		case 101:
			if ((active0 & 0x2000000000L) != 0L) {
				jjmatchedKind = 37;
				jjmatchedPos = 7;
			} else if ((active0 & 0x8000000000000000L) != 0L) {
				jjmatchedKind = 63;
				jjmatchedPos = 7;
			} else if ((active1 & 0x40L) != 0L) {
				jjmatchedKind = 70;
				jjmatchedPos = 7;
			} else if ((active1 & 0x20000000000000L) != 0L) {
				jjmatchedKind = 117;
				jjmatchedPos = 7;
			}
			break;
		case 102:
			return jjMoveStringLiteralDfa8_0(active0, 0L, active1,
					0x10000000000L);
		case 105:
			return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0x20L);
		case 108:
			if ((active0 & 0x10000000000000L) != 0L) {
				jjmatchedKind = 52;
				jjmatchedPos = 7;
			}
			break;
		case 109:
			if ((active1 & 0x2L) != 0L) {
				jjmatchedKind = 65;
				jjmatchedPos = 7;
			}
			break;
		case 111:
			return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0x300000L);
		case 114:
			if ((active1 & 0x400000000L) != 0L) {
				jjmatchedKind = 98;
				jjmatchedPos = 7;
			}
			return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0x200000000L);
		case 115:
			if ((active1 & 0x8000000L) != 0L) {
				jjmatchedKind = 91;
				jjmatchedPos = 7;
			} else if ((active1 & 0x8000000000L) != 0L) {
				jjmatchedKind = 103;
				jjmatchedPos = 7;
			}
			return jjMoveStringLiteralDfa8_0(active0, 0x800000000000000L,
					active1, 0L);
		case 116:
			if ((active0 & 0x8000000000L) != 0L) {
				jjmatchedKind = 39;
				jjmatchedPos = 7;
			}
			return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0x80000000L);
		default:
			break;
		}
		return jjMoveNfa_0(0, 7);
	}

	private int jjMoveStringLiteralDfa8_0(long old0, long active0, long old1,
			long active1) {
		if (((active0 &= old0) | (active1 &= old1)) == 0L)
			return jjMoveNfa_0(0, 7);
		try {
			curChar = input_stream.readChar();
		} catch (java.io.IOException e) {
			return jjMoveNfa_0(0, 7);
		}
		switch (curChar) {
		case 67:
			if ((active1 & 0x20L) != 0L) {
				jjmatchedKind = 69;
				jjmatchedPos = 8;
			}
			break;
		case 69:
			if ((active1 & 0x200000000L) != 0L) {
				jjmatchedKind = 97;
				jjmatchedPos = 8;
			}
			break;
		case 72:
			return jjMoveStringLiteralDfa9_0(active0, 0x4000000000000000L,
					active1, 0L);
		case 76:
			if ((active1 & 0x10L) != 0L) {
				jjmatchedKind = 68;
				jjmatchedPos = 8;
			}
			break;
		case 78:
			return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0x100000L);
		case 79:
			return jjMoveStringLiteralDfa9_0(active0, 0L, active1,
					0x10000000000L);
		case 82:
			if ((active1 & 0x200000L) != 0L) {
				jjmatchedKind = 85;
				jjmatchedPos = 8;
			}
			break;
		case 83:
			if ((active1 & 0x80000000L) != 0L) {
				jjmatchedKind = 95;
				jjmatchedPos = 8;
			}
			break;
		case 84:
			if ((active0 & 0x1000000000L) != 0L) {
				jjmatchedKind = 36;
				jjmatchedPos = 8;
			}
			return jjMoveStringLiteralDfa9_0(active0, 0x800000000000000L,
					active1, 0L);
		case 99:
			if ((active1 & 0x20L) != 0L) {
				jjmatchedKind = 69;
				jjmatchedPos = 8;
			}
			break;
		case 101:
			if ((active1 & 0x200000000L) != 0L) {
				jjmatchedKind = 97;
				jjmatchedPos = 8;
			}
			break;
		case 104:
			return jjMoveStringLiteralDfa9_0(active0, 0x4000000000000000L,
					active1, 0L);
		case 108:
			if ((active1 & 0x10L) != 0L) {
				jjmatchedKind = 68;
				jjmatchedPos = 8;
			}
			break;
		case 110:
			return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0x100000L);
		case 111:
			return jjMoveStringLiteralDfa9_0(active0, 0L, active1,
					0x10000000000L);
		case 114:
			if ((active1 & 0x200000L) != 0L) {
				jjmatchedKind = 85;
				jjmatchedPos = 8;
			}
			break;
		case 115:
			if ((active1 & 0x80000000L) != 0L) {
				jjmatchedKind = 95;
				jjmatchedPos = 8;
			}
			break;
		case 116:
			if ((active0 & 0x1000000000L) != 0L) {
				jjmatchedKind = 36;
				jjmatchedPos = 8;
			}
			return jjMoveStringLiteralDfa9_0(active0, 0x800000000000000L,
					active1, 0L);
		default:
			break;
		}
		return jjMoveNfa_0(0, 8);
	}

	private int jjMoveStringLiteralDfa9_0(long old0, long active0, long old1,
			long active1) {
		if (((active0 &= old0) | (active1 &= old1)) == 0L)
			return jjMoveNfa_0(0, 8);
		try {
			curChar = input_stream.readChar();
		} catch (java.io.IOException e) {
			return jjMoveNfa_0(0, 8);
		}
		switch (curChar) {
		case 67:
			return jjMoveStringLiteralDfa10_0(active0, 0L, active1, 0x100000L);
		case 69:
			return jjMoveStringLiteralDfa10_0(active0, 0x4000000000000000L,
					active1, 0L);
		case 82:
			return jjMoveStringLiteralDfa10_0(active0, 0L, active1,
					0x10000000000L);
		case 83:
			if ((active0 & 0x800000000000000L) != 0L) {
				jjmatchedKind = 59;
				jjmatchedPos = 9;
			}
			break;
		case 99:
			return jjMoveStringLiteralDfa10_0(active0, 0L, active1, 0x100000L);
		case 101:
			return jjMoveStringLiteralDfa10_0(active0, 0x4000000000000000L,
					active1, 0L);
		case 114:
			return jjMoveStringLiteralDfa10_0(active0, 0L, active1,
					0x10000000000L);
		case 115:
			if ((active0 & 0x800000000000000L) != 0L) {
				jjmatchedKind = 59;
				jjmatchedPos = 9;
			}
			break;
		default:
			break;
		}
		return jjMoveNfa_0(0, 9);
	}

	private int jjMoveStringLiteralDfa10_0(long old0, long active0, long old1,
			long active1) {
		if (((active0 &= old0) | (active1 &= old1)) == 0L)
			return jjMoveNfa_0(0, 9);
		try {
			curChar = input_stream.readChar();
		} catch (java.io.IOException e) {
			return jjMoveNfa_0(0, 9);
		}
		switch (curChar) {
		case 65:
			return jjMoveStringLiteralDfa11_0(active0, 0L, active1, 0x100000L);
		case 83:
			if ((active0 & 0x4000000000000000L) != 0L) {
				jjmatchedKind = 62;
				jjmatchedPos = 10;
			}
			break;
		case 95:
			return jjMoveStringLiteralDfa11_0(active0, 0L, active1,
					0x10000000000L);
		case 97:
			return jjMoveStringLiteralDfa11_0(active0, 0L, active1, 0x100000L);
		case 115:
			if ((active0 & 0x4000000000000000L) != 0L) {
				jjmatchedKind = 62;
				jjmatchedPos = 10;
			}
			break;
		default:
			break;
		}
		return jjMoveNfa_0(0, 10);
	}

	private int jjMoveStringLiteralDfa11_0(long old0, long active0, long old1,
			long active1) {
		if (((active0 &= old0) | (active1 &= old1)) == 0L)
			return jjMoveNfa_0(0, 10);
		try {
			curChar = input_stream.readChar();
		} catch (java.io.IOException e) {
			return jjMoveNfa_0(0, 10);
		}
		switch (curChar) {
		case 84:
			if ((active1 & 0x100000L) != 0L) {
				jjmatchedKind = 84;
				jjmatchedPos = 11;
			}
			break;
		case 85:
			return jjMoveStringLiteralDfa12_0(active1, 0x10000000000L);
		case 116:
			if ((active1 & 0x100000L) != 0L) {
				jjmatchedKind = 84;
				jjmatchedPos = 11;
			}
			break;
		case 117:
			return jjMoveStringLiteralDfa12_0(active1, 0x10000000000L);
		default:
			break;
		}
		return jjMoveNfa_0(0, 11);
	}

	private int jjMoveStringLiteralDfa12_0(long old1, long active1) {
		if (((active1 &= old1)) == 0L)
			return jjMoveNfa_0(0, 11);
		try {
			curChar = input_stream.readChar();
		} catch (java.io.IOException e) {
			return jjMoveNfa_0(0, 11);
		}
		switch (curChar) {
		case 82:
			return jjMoveStringLiteralDfa13_0(active1, 0x10000000000L);
		case 114:
			return jjMoveStringLiteralDfa13_0(active1, 0x10000000000L);
		default:
			break;
		}
		return jjMoveNfa_0(0, 12);
	}

	private int jjMoveStringLiteralDfa13_0(long old1, long active1) {
		if (((active1 &= old1)) == 0L)
			return jjMoveNfa_0(0, 12);
		try {
			curChar = input_stream.readChar();
		} catch (java.io.IOException e) {
			return jjMoveNfa_0(0, 12);
		}
		switch (curChar) {
		case 73:
			if ((active1 & 0x10000000000L) != 0L) {
				jjmatchedKind = 104;
				jjmatchedPos = 13;
			}
			break;
		case 105:
			if ((active1 & 0x10000000000L) != 0L) {
				jjmatchedKind = 104;
				jjmatchedPos = 13;
			}
			break;
		default:
			break;
		}
		return jjMoveNfa_0(0, 13);
	}

	static final long[] jjbitVec0 = { 0xfffffffffffffffeL, 0xffffffffffffffffL,
			0xffffffffffffffffL, 0xffffffffffffffffL };
	static final long[] jjbitVec2 = { 0x0L, 0x0L, 0xffffffffffffffffL,
			0xffffffffffffffffL };
	static final long[] jjbitVec3 = { 0xfffe7000fffffff6L, 0xffffffffffffffffL,
			0xffffffffffffffffL, 0x5e00000000ffffffL };
	static final long[] jjbitVec4 = { 0x0L, 0x0L, 0x0L, 0xff7fffffff7fffffL };
	static final long[] jjbitVec5 = { 0x0L, 0xbfff000000000000L,
			0xffffffffffffffffL, 0xffffffffffffffffL };
	static final long[] jjbitVec6 = { 0x3000L, 0xffff000000000000L,
			0xffffffffffffffffL, 0xffffffffffffffffL };
	static final long[] jjbitVec7 = { 0xffffffffffffffffL, 0xffffffffffffffffL,
			0xffffL, 0x0L };
	static final long[] jjbitVec8 = { 0xffffffffffffffffL, 0xffffffffffffffffL,
			0xffffffffffffffffL, 0xffffffffffffL };
	static final long[] jjbitVec9 = { 0xffffffffffffffffL, 0xffffffffffffffffL,
			0xffffffffffffffffL, 0xffff00000000ffffL };
	static final long[] jjbitVec10 = { 0xffffffffffffffffL,
			0xffffffffffffffffL, 0xffffffffffffffffL, 0x3fffffffffffffffL };
	static final long[] jjbitVec11 = { 0x0L, 0x0L, 0x80000000000000L,
			0xff7fffffff7fffffL };
	static final long[] jjbitVec12 = { 0xffffffffffffffffL,
			0xbfffffffffffffffL, 0xffffffffffffffffL, 0xffffffffffffffffL };
	static final long[] jjbitVec13 = { 0x8000000000003000L,
			0xffff000000000001L, 0xffffffffffffffffL, 0xffffffffffffffffL };

	private int jjMoveNfa_0(int startState, int curPos) {
		int strKind = jjmatchedKind;
		int strPos = jjmatchedPos;
		int seenUpto;
		input_stream.backup(seenUpto = curPos + 1);
		try {
			curChar = input_stream.readChar();
		} catch (java.io.IOException e) {
			throw new Error("Internal Error");
		}
		curPos = 0;
		int startsAt = 0;
		jjnewStateCnt = 211;
		int i = 1;
		jjstateSet[0] = startState;
		int kind = 0x7fffffff;
		for (;;) {
			if (++jjround == 0x7fffffff)
				ReInitRounds();
			if (curChar < 64) {
				long l = 1L << curChar;
				do {
					switch (jjstateSet[--i]) {
					case 0:
						if ((0x3ff000000000000L & l) != 0L) {
							if (kind > 149)
								kind = 149;
							jjCheckNAddStates(0, 6);
						} else if ((0x100003600L & l) != 0L) {
							if (kind > 2)
								kind = 2;
						} else if (curChar == 46)
							jjCheckNAddTwoStates(206, 207);
						else if (curChar == 45)
							jjCheckNAddStates(7, 11);
						else if (curChar == 43)
							jjCheckNAddStates(12, 16);
						else if (curChar == 58) {
							if (kind > 143)
								kind = 143;
							jjCheckNAddStates(17, 19);
						} else if (curChar == 34)
							jjstateSet[jjnewStateCnt++] = 91;
						else if (curChar == 39)
							jjstateSet[jjnewStateCnt++] = 80;
						else if (curChar == 36)
							jjAddStates(20, 22);
						else if (curChar == 60)
							jjCheckNAddTwoStates(13, 14);
						else if (curChar == 40)
							jjCheckNAddTwoStates(4, 5);
						else if (curChar == 35) {
							if (kind > 3)
								kind = 3;
							jjCheckNAdd(2);
						} else if (curChar == 63)
							jjAddStates(23, 25);
						if (curChar == 34)
							jjCheckNAddStates(26, 28);
						else if (curChar == 39)
							jjCheckNAddStates(29, 31);
						break;
					case 1:
						if (curChar != 35)
							break;
						if (kind > 3)
							kind = 3;
						jjCheckNAdd(2);
						break;
					case 2:
						if ((0xffffffffffffdbffL & l) == 0L)
							break;
						if (kind > 3)
							kind = 3;
						jjCheckNAdd(2);
						break;
					case 3:
						if (curChar == 40)
							jjCheckNAddTwoStates(4, 5);
						break;
					case 4:
						if ((0x100003600L & l) != 0L)
							jjCheckNAddTwoStates(4, 5);
						break;
					case 5:
						if (curChar == 41 && kind > 30)
							kind = 30;
						break;
					case 7:
						if ((0x100003600L & l) != 0L)
							jjAddStates(32, 33);
						break;
					case 12:
						if (curChar == 60)
							jjCheckNAddTwoStates(13, 14);
						break;
					case 13:
						if ((0xaffffffa00000000L & l) != 0L)
							jjCheckNAddTwoStates(13, 14);
						break;
					case 14:
						if (curChar == 62 && kind > 142)
							kind = 142;
						break;
					case 15:
						if (curChar == 58)
							jjAddStates(34, 36);
						break;
					case 16:
					case 33:
						if ((0x3ff000000000000L & l) == 0L)
							break;
						if (kind > 145)
							kind = 145;
						jjCheckNAddStates(37, 40);
						break;
					case 17:
						if ((0x3ff600000000000L & l) != 0L)
							jjCheckNAddStates(37, 40);
						break;
					case 18:
						if ((0x3ff200000000000L & l) != 0L && kind > 145)
							kind = 145;
						break;
					case 19:
						if (curChar == 37)
							jjAddStates(41, 44);
						break;
					case 20:
					case 25:
						if ((0x3ff000000000000L & l) != 0L)
							jjCheckNAdd(21);
						break;
					case 21:
						if ((0x3ff000000000000L & l) != 0L)
							jjCheckNAddStates(37, 40);
						break;
					case 23:
						if ((0xac00ff7e00000000L & l) != 0L)
							jjCheckNAddStates(37, 40);
						break;
					case 24:
						if ((0xac00ff7e00000000L & l) != 0L && kind > 145)
							kind = 145;
						break;
					case 26:
					case 28:
						if ((0x3ff000000000000L & l) != 0L)
							jjCheckNAdd(27);
						break;
					case 27:
						if ((0x3ff000000000000L & l) != 0L && kind > 145)
							kind = 145;
						break;
					case 30:
						if ((0xac00ff7e00000000L & l) == 0L)
							break;
						if (kind > 145)
							kind = 145;
						jjCheckNAddStates(37, 40);
						break;
					case 31:
						if (curChar == 37)
							jjstateSet[jjnewStateCnt++] = 32;
						break;
					case 32:
						if ((0x3ff000000000000L & l) != 0L)
							jjstateSet[jjnewStateCnt++] = 33;
						break;
					case 35:
						if (curChar == 63)
							jjAddStates(23, 25);
						break;
					case 36:
					case 37:
					case 40:
						if ((0x3ff000000000000L & l) == 0L)
							break;
						if (kind > 146)
							kind = 146;
						jjCheckNAddStates(45, 47);
						break;
					case 38:
						if (curChar == 37)
							jjstateSet[jjnewStateCnt++] = 39;
						break;
					case 39:
					case 45:
						if ((0x3ff000000000000L & l) != 0L)
							jjCheckNAdd(40);
						break;
					case 42:
						if ((0xac00ff7e00000000L & l) == 0L)
							break;
						if (kind > 146)
							kind = 146;
						jjCheckNAddStates(45, 47);
						break;
					case 44:
						if (curChar == 37)
							jjstateSet[jjnewStateCnt++] = 45;
						break;
					case 46:
						if (curChar == 36)
							jjAddStates(20, 22);
						break;
					case 47:
					case 48:
					case 51:
						if ((0x3ff000000000000L & l) == 0L)
							break;
						if (kind > 147)
							kind = 147;
						jjCheckNAddStates(48, 50);
						break;
					case 49:
						if (curChar == 37)
							jjstateSet[jjnewStateCnt++] = 50;
						break;
					case 50:
					case 56:
						if ((0x3ff000000000000L & l) != 0L)
							jjCheckNAdd(51);
						break;
					case 53:
						if ((0xac00ff7e00000000L & l) == 0L)
							break;
						if (kind > 147)
							kind = 147;
						jjCheckNAddStates(48, 50);
						break;
					case 55:
						if (curChar == 37)
							jjstateSet[jjnewStateCnt++] = 56;
						break;
					case 59:
						if (curChar == 45)
							jjCheckNAdd(60);
						break;
					case 60:
						if ((0x3ff000000000000L & l) == 0L)
							break;
						if (kind > 148)
							kind = 148;
						jjCheckNAddTwoStates(59, 60);
						break;
					case 61:
						if (curChar == 39)
							jjCheckNAddStates(29, 31);
						break;
					case 62:
						if ((0xffffff7fffffdbffL & l) != 0L)
							jjCheckNAddStates(29, 31);
						break;
					case 64:
						if ((0x8400000000L & l) != 0L)
							jjCheckNAddStates(29, 31);
						break;
					case 65:
						if (curChar == 39 && kind > 164)
							kind = 164;
						break;
					case 66:
						if (curChar == 34)
							jjCheckNAddStates(26, 28);
						break;
					case 67:
						if ((0xfffffffbffffdbffL & l) != 0L)
							jjCheckNAddStates(26, 28);
						break;
					case 69:
						if ((0x8400000000L & l) != 0L)
							jjCheckNAddStates(26, 28);
						break;
					case 70:
						if (curChar == 34 && kind > 165)
							kind = 165;
						break;
					case 71:
						if (curChar == 39)
							jjCheckNAddStates(51, 54);
						break;
					case 72:
					case 77:
						if (curChar == 39)
							jjCheckNAddTwoStates(73, 74);
						break;
					case 73:
						if ((0xffffff7fffffffffL & l) != 0L)
							jjCheckNAddStates(51, 54);
						break;
					case 75:
						if ((0x8400000000L & l) != 0L)
							jjCheckNAddStates(51, 54);
						break;
					case 76:
						if (curChar == 39)
							jjAddStates(55, 56);
						break;
					case 78:
						if (curChar == 39 && kind > 166)
							kind = 166;
						break;
					case 79:
						if (curChar == 39)
							jjstateSet[jjnewStateCnt++] = 78;
						break;
					case 80:
						if (curChar == 39)
							jjstateSet[jjnewStateCnt++] = 71;
						break;
					case 81:
						if (curChar == 39)
							jjstateSet[jjnewStateCnt++] = 80;
						break;
					case 82:
						if (curChar == 34)
							jjCheckNAddStates(57, 60);
						break;
					case 83:
					case 88:
						if (curChar == 34)
							jjCheckNAddTwoStates(84, 85);
						break;
					case 84:
						if ((0xfffffffbffffffffL & l) != 0L)
							jjCheckNAddStates(57, 60);
						break;
					case 86:
						if ((0x8400000000L & l) != 0L)
							jjCheckNAddStates(57, 60);
						break;
					case 87:
						if (curChar == 34)
							jjAddStates(61, 62);
						break;
					case 89:
						if (curChar == 34 && kind > 167)
							kind = 167;
						break;
					case 90:
						if (curChar == 34)
							jjstateSet[jjnewStateCnt++] = 89;
						break;
					case 91:
						if (curChar == 34)
							jjstateSet[jjnewStateCnt++] = 82;
						break;
					case 92:
						if (curChar == 34)
							jjstateSet[jjnewStateCnt++] = 91;
						break;
					case 103:
						if ((0x3ff600000000000L & l) != 0L)
							jjCheckNAddStates(63, 66);
						break;
					case 104:
						if ((0x3ff200000000000L & l) != 0L)
							jjCheckNAdd(105);
						break;
					case 105:
						if (curChar == 58 && kind > 143)
							kind = 143;
						break;
					case 107:
						if ((0xac00ff7e00000000L & l) != 0L)
							jjCheckNAddStates(63, 66);
						break;
					case 108:
						if (curChar == 37)
							jjAddStates(67, 68);
						break;
					case 109:
						if ((0x3ff000000000000L & l) != 0L)
							jjstateSet[jjnewStateCnt++] = 110;
						break;
					case 110:
						if ((0x3ff000000000000L & l) != 0L)
							jjCheckNAddStates(63, 66);
						break;
					case 111:
						if ((0x3ff000000000000L & l) != 0L)
							jjstateSet[jjnewStateCnt++] = 112;
						break;
					case 112:
						if ((0x3ff000000000000L & l) != 0L)
							jjCheckNAdd(105);
						break;
					case 113:
						if ((0xac00ff7e00000000L & l) != 0L)
							jjCheckNAdd(105);
						break;
					case 114:
						if ((0x3ff600000000000L & l) != 0L)
							jjCheckNAddStates(69, 72);
						break;
					case 115:
						if ((0x3ff200000000000L & l) != 0L)
							jjCheckNAdd(116);
						break;
					case 116:
						if (curChar == 58)
							jjCheckNAddStates(17, 19);
						break;
					case 117:
					case 134:
						if ((0x3ff000000000000L & l) == 0L)
							break;
						if (kind > 144)
							kind = 144;
						jjCheckNAddStates(73, 76);
						break;
					case 118:
						if ((0x3ff600000000000L & l) != 0L)
							jjCheckNAddStates(73, 76);
						break;
					case 119:
						if ((0x3ff200000000000L & l) != 0L && kind > 144)
							kind = 144;
						break;
					case 120:
						if (curChar == 37)
							jjAddStates(77, 80);
						break;
					case 121:
					case 126:
						if ((0x3ff000000000000L & l) != 0L)
							jjCheckNAdd(122);
						break;
					case 122:
						if ((0x3ff000000000000L & l) != 0L)
							jjCheckNAddStates(73, 76);
						break;
					case 124:
						if ((0xac00ff7e00000000L & l) != 0L)
							jjCheckNAddStates(73, 76);
						break;
					case 125:
						if ((0xac00ff7e00000000L & l) != 0L && kind > 144)
							kind = 144;
						break;
					case 127:
					case 129:
						if ((0x3ff000000000000L & l) != 0L)
							jjCheckNAdd(128);
						break;
					case 128:
						if ((0x3ff000000000000L & l) != 0L && kind > 144)
							kind = 144;
						break;
					case 131:
						if ((0xac00ff7e00000000L & l) == 0L)
							break;
						if (kind > 144)
							kind = 144;
						jjCheckNAddStates(73, 76);
						break;
					case 132:
						if (curChar == 37)
							jjstateSet[jjnewStateCnt++] = 133;
						break;
					case 133:
						if ((0x3ff000000000000L & l) != 0L)
							jjstateSet[jjnewStateCnt++] = 134;
						break;
					case 136:
						if ((0xac00ff7e00000000L & l) != 0L)
							jjCheckNAddStates(69, 72);
						break;
					case 137:
						if (curChar == 37)
							jjAddStates(81, 82);
						break;
					case 138:
						if ((0x3ff000000000000L & l) != 0L)
							jjstateSet[jjnewStateCnt++] = 139;
						break;
					case 139:
						if ((0x3ff000000000000L & l) != 0L)
							jjCheckNAddStates(69, 72);
						break;
					case 140:
						if ((0x3ff000000000000L & l) != 0L)
							jjstateSet[jjnewStateCnt++] = 141;
						break;
					case 141:
						if ((0x3ff000000000000L & l) != 0L)
							jjCheckNAdd(116);
						break;
					case 142:
						if ((0xac00ff7e00000000L & l) != 0L)
							jjCheckNAdd(116);
						break;
					case 143:
						if (curChar != 58)
							break;
						if (kind > 143)
							kind = 143;
						jjCheckNAddStates(17, 19);
						break;
					case 144:
						if ((0x3ff000000000000L & l) == 0L)
							break;
						if (kind > 149)
							kind = 149;
						jjCheckNAddStates(0, 6);
						break;
					case 145:
						if ((0x3ff000000000000L & l) == 0L)
							break;
						if (kind > 149)
							kind = 149;
						jjCheckNAdd(145);
						break;
					case 146:
						if ((0x3ff000000000000L & l) != 0L)
							jjCheckNAddTwoStates(146, 147);
						break;
					case 147:
						if (curChar != 46)
							break;
						if (kind > 152)
							kind = 152;
						jjCheckNAdd(148);
						break;
					case 148:
						if ((0x3ff000000000000L & l) == 0L)
							break;
						if (kind > 152)
							kind = 152;
						jjCheckNAdd(148);
						break;
					case 149:
						if ((0x3ff000000000000L & l) != 0L)
							jjCheckNAddTwoStates(149, 150);
						break;
					case 150:
						if (curChar == 46)
							jjCheckNAddTwoStates(151, 152);
						break;
					case 151:
						if ((0x3ff000000000000L & l) != 0L)
							jjCheckNAddTwoStates(151, 152);
						break;
					case 153:
						if ((0x280000000000L & l) != 0L)
							jjCheckNAdd(154);
						break;
					case 154:
						if ((0x3ff000000000000L & l) == 0L)
							break;
						if (kind > 157)
							kind = 157;
						jjCheckNAdd(154);
						break;
					case 155:
						if ((0x3ff000000000000L & l) != 0L)
							jjCheckNAddTwoStates(155, 156);
						break;
					case 157:
						if ((0x280000000000L & l) != 0L)
							jjCheckNAdd(158);
						break;
					case 158:
						if ((0x3ff000000000000L & l) == 0L)
							break;
						if (kind > 157)
							kind = 157;
						jjCheckNAdd(158);
						break;
					case 159:
						if (curChar == 43)
							jjCheckNAddStates(12, 16);
						break;
					case 160:
						if ((0x3ff000000000000L & l) == 0L)
							break;
						if (kind > 150)
							kind = 150;
						jjCheckNAdd(160);
						break;
					case 161:
						if ((0x3ff000000000000L & l) != 0L)
							jjCheckNAddTwoStates(161, 162);
						break;
					case 162:
						if (curChar != 46)
							break;
						if (kind > 155)
							kind = 155;
						jjCheckNAdd(163);
						break;
					case 163:
						if ((0x3ff000000000000L & l) == 0L)
							break;
						if (kind > 155)
							kind = 155;
						jjCheckNAdd(163);
						break;
					case 164:
						if (curChar == 46)
							jjCheckNAdd(165);
						break;
					case 165:
						if ((0x3ff000000000000L & l) == 0L)
							break;
						if (kind > 155)
							kind = 155;
						jjCheckNAdd(165);
						break;
					case 166:
						if (curChar == 46)
							jjCheckNAdd(167);
						break;
					case 167:
						if ((0x3ff000000000000L & l) != 0L)
							jjCheckNAddTwoStates(167, 168);
						break;
					case 169:
						if ((0x280000000000L & l) != 0L)
							jjCheckNAdd(170);
						break;
					case 170:
						if ((0x3ff000000000000L & l) == 0L)
							break;
						if (kind > 162)
							kind = 162;
						jjCheckNAdd(170);
						break;
					case 171:
						if ((0x3ff000000000000L & l) != 0L)
							jjCheckNAddStates(83, 86);
						break;
					case 172:
						if ((0x3ff000000000000L & l) != 0L)
							jjCheckNAddTwoStates(172, 173);
						break;
					case 173:
						if (curChar == 46)
							jjCheckNAddTwoStates(174, 175);
						break;
					case 174:
						if ((0x3ff000000000000L & l) != 0L)
							jjCheckNAddTwoStates(174, 175);
						break;
					case 176:
						if ((0x280000000000L & l) != 0L)
							jjCheckNAdd(177);
						break;
					case 177:
						if ((0x3ff000000000000L & l) == 0L)
							break;
						if (kind > 162)
							kind = 162;
						jjCheckNAdd(177);
						break;
					case 178:
						if ((0x3ff000000000000L & l) != 0L)
							jjCheckNAddTwoStates(178, 179);
						break;
					case 180:
						if ((0x280000000000L & l) != 0L)
							jjCheckNAdd(181);
						break;
					case 181:
						if ((0x3ff000000000000L & l) == 0L)
							break;
						if (kind > 162)
							kind = 162;
						jjCheckNAdd(181);
						break;
					case 182:
						if (curChar == 45)
							jjCheckNAddStates(7, 11);
						break;
					case 183:
						if ((0x3ff000000000000L & l) == 0L)
							break;
						if (kind > 151)
							kind = 151;
						jjCheckNAdd(183);
						break;
					case 184:
						if ((0x3ff000000000000L & l) != 0L)
							jjCheckNAddTwoStates(184, 185);
						break;
					case 185:
						if (curChar != 46)
							break;
						if (kind > 156)
							kind = 156;
						jjCheckNAdd(186);
						break;
					case 186:
						if ((0x3ff000000000000L & l) == 0L)
							break;
						if (kind > 156)
							kind = 156;
						jjCheckNAdd(186);
						break;
					case 187:
						if (curChar == 46)
							jjCheckNAdd(188);
						break;
					case 188:
						if ((0x3ff000000000000L & l) == 0L)
							break;
						if (kind > 156)
							kind = 156;
						jjCheckNAdd(188);
						break;
					case 189:
						if (curChar == 46)
							jjCheckNAdd(190);
						break;
					case 190:
						if ((0x3ff000000000000L & l) != 0L)
							jjCheckNAddTwoStates(190, 191);
						break;
					case 192:
						if ((0x280000000000L & l) != 0L)
							jjCheckNAdd(193);
						break;
					case 193:
						if ((0x3ff000000000000L & l) == 0L)
							break;
						if (kind > 163)
							kind = 163;
						jjCheckNAdd(193);
						break;
					case 194:
						if ((0x3ff000000000000L & l) != 0L)
							jjCheckNAddStates(87, 90);
						break;
					case 195:
						if ((0x3ff000000000000L & l) != 0L)
							jjCheckNAddTwoStates(195, 196);
						break;
					case 196:
						if (curChar == 46)
							jjCheckNAddTwoStates(197, 198);
						break;
					case 197:
						if ((0x3ff000000000000L & l) != 0L)
							jjCheckNAddTwoStates(197, 198);
						break;
					case 199:
						if ((0x280000000000L & l) != 0L)
							jjCheckNAdd(200);
						break;
					case 200:
						if ((0x3ff000000000000L & l) == 0L)
							break;
						if (kind > 163)
							kind = 163;
						jjCheckNAdd(200);
						break;
					case 201:
						if ((0x3ff000000000000L & l) != 0L)
							jjCheckNAddTwoStates(201, 202);
						break;
					case 203:
						if ((0x280000000000L & l) != 0L)
							jjCheckNAdd(204);
						break;
					case 204:
						if ((0x3ff000000000000L & l) == 0L)
							break;
						if (kind > 163)
							kind = 163;
						jjCheckNAdd(204);
						break;
					case 205:
						if (curChar == 46)
							jjCheckNAddTwoStates(206, 207);
						break;
					case 206:
						if ((0x3ff000000000000L & l) == 0L)
							break;
						if (kind > 152)
							kind = 152;
						jjCheckNAdd(206);
						break;
					case 207:
						if ((0x3ff000000000000L & l) != 0L)
							jjCheckNAddTwoStates(207, 208);
						break;
					case 209:
						if ((0x280000000000L & l) != 0L)
							jjCheckNAdd(210);
						break;
					case 210:
						if ((0x3ff000000000000L & l) == 0L)
							break;
						if (kind > 157)
							kind = 157;
						jjCheckNAdd(210);
						break;
					default:
						break;
					}
				} while (i != startsAt);
			} else if (curChar < 128) {
				long l = 1L << (curChar & 077);
				do {
					switch (jjstateSet[--i]) {
					case 0:
						if ((0x7fffffe07fffffeL & l) != 0L)
							jjCheckNAddStates(91, 100);
						else if (curChar == 64)
							jjCheckNAdd(58);
						else if (curChar == 95)
							jjstateSet[jjnewStateCnt++] = 15;
						else if (curChar == 91)
							jjAddStates(32, 33);
						if ((0x20000000200L & l) != 0L)
							jjAddStates(101, 103);
						else if ((0x20000000200000L & l) != 0L)
							jjstateSet[jjnewStateCnt++] = 10;
						break;
					case 2:
						if (kind > 3)
							kind = 3;
						jjstateSet[jjnewStateCnt++] = 2;
						break;
					case 6:
						if (curChar == 91)
							jjAddStates(32, 33);
						break;
					case 8:
						if (curChar == 93 && kind > 31)
							kind = 31;
						break;
					case 9:
						if ((0x20000000200L & l) != 0L && kind > 74)
							kind = 74;
						break;
					case 10:
					case 101:
						if ((0x4000000040000L & l) != 0L)
							jjCheckNAdd(9);
						break;
					case 11:
						if ((0x20000000200000L & l) != 0L)
							jjstateSet[jjnewStateCnt++] = 10;
						break;
					case 13:
						if ((0xc7fffffeafffffffL & l) != 0L)
							jjAddStates(104, 105);
						break;
					case 16:
						if ((0x7fffffe87fffffeL & l) == 0L)
							break;
						if (kind > 145)
							kind = 145;
						jjCheckNAddStates(37, 40);
						break;
					case 17:
						if ((0x7fffffe87fffffeL & l) != 0L)
							jjCheckNAddStates(37, 40);
						break;
					case 18:
						if ((0x7fffffe87fffffeL & l) != 0L && kind > 145)
							kind = 145;
						break;
					case 20:
					case 25:
						if ((0x7e0000007eL & l) != 0L)
							jjCheckNAdd(21);
						break;
					case 21:
						if ((0x7e0000007eL & l) != 0L)
							jjCheckNAddStates(37, 40);
						break;
					case 22:
						if (curChar == 92)
							jjAddStates(106, 109);
						break;
					case 23:
						if ((0x4000000080000001L & l) != 0L)
							jjCheckNAddStates(37, 40);
						break;
					case 24:
						if ((0x4000000080000001L & l) != 0L && kind > 145)
							kind = 145;
						break;
					case 26:
					case 28:
						if ((0x7e0000007eL & l) != 0L)
							jjCheckNAdd(27);
						break;
					case 27:
						if ((0x7e0000007eL & l) != 0L && kind > 145)
							kind = 145;
						break;
					case 29:
						if (curChar == 92)
							jjstateSet[jjnewStateCnt++] = 30;
						break;
					case 30:
						if ((0x4000000080000001L & l) == 0L)
							break;
						if (kind > 145)
							kind = 145;
						jjCheckNAddStates(37, 40);
						break;
					case 32:
						if ((0x7e0000007eL & l) != 0L)
							jjstateSet[jjnewStateCnt++] = 33;
						break;
					case 33:
						if ((0x7e0000007eL & l) == 0L)
							break;
						if (kind > 145)
							kind = 145;
						jjCheckNAddStates(37, 40);
						break;
					case 34:
						if (curChar == 95)
							jjstateSet[jjnewStateCnt++] = 15;
						break;
					case 36:
					case 37:
						if ((0x7fffffe87fffffeL & l) == 0L)
							break;
						if (kind > 146)
							kind = 146;
						jjCheckNAddStates(45, 47);
						break;
					case 39:
					case 45:
						if ((0x7e0000007eL & l) != 0L)
							jjCheckNAdd(40);
						break;
					case 40:
						if ((0x7e0000007eL & l) == 0L)
							break;
						if (kind > 146)
							kind = 146;
						jjCheckNAddStates(45, 47);
						break;
					case 41:
					case 43:
						if (curChar == 92)
							jjCheckNAdd(42);
						break;
					case 42:
						if ((0x4000000080000001L & l) == 0L)
							break;
						if (kind > 146)
							kind = 146;
						jjCheckNAddStates(45, 47);
						break;
					case 47:
					case 48:
						if ((0x7fffffe87fffffeL & l) == 0L)
							break;
						if (kind > 147)
							kind = 147;
						jjCheckNAddStates(48, 50);
						break;
					case 50:
					case 56:
						if ((0x7e0000007eL & l) != 0L)
							jjCheckNAdd(51);
						break;
					case 51:
						if ((0x7e0000007eL & l) == 0L)
							break;
						if (kind > 147)
							kind = 147;
						jjCheckNAddStates(48, 50);
						break;
					case 52:
					case 54:
						if (curChar == 92)
							jjCheckNAdd(53);
						break;
					case 53:
						if ((0x4000000080000001L & l) == 0L)
							break;
						if (kind > 147)
							kind = 147;
						jjCheckNAddStates(48, 50);
						break;
					case 57:
						if (curChar == 64)
							jjCheckNAdd(58);
						break;
					case 58:
						if ((0x7fffffe07fffffeL & l) == 0L)
							break;
						if (kind > 148)
							kind = 148;
						jjCheckNAddTwoStates(58, 59);
						break;
					case 60:
						if ((0x7fffffe07fffffeL & l) == 0L)
							break;
						if (kind > 148)
							kind = 148;
						jjCheckNAddTwoStates(59, 60);
						break;
					case 62:
						if ((0xffffffffefffffffL & l) != 0L)
							jjCheckNAddStates(29, 31);
						break;
					case 63:
						if (curChar == 92)
							jjstateSet[jjnewStateCnt++] = 64;
						break;
					case 64:
						if ((0x14404410000000L & l) != 0L)
							jjCheckNAddStates(29, 31);
						break;
					case 67:
						if ((0xffffffffefffffffL & l) != 0L)
							jjCheckNAddStates(26, 28);
						break;
					case 68:
						if (curChar == 92)
							jjstateSet[jjnewStateCnt++] = 69;
						break;
					case 69:
						if ((0x14404410000000L & l) != 0L)
							jjCheckNAddStates(26, 28);
						break;
					case 73:
						if ((0xffffffffefffffffL & l) != 0L)
							jjCheckNAddStates(51, 54);
						break;
					case 74:
						if (curChar == 92)
							jjstateSet[jjnewStateCnt++] = 75;
						break;
					case 75:
						if ((0x14404410000000L & l) != 0L)
							jjCheckNAddStates(51, 54);
						break;
					case 84:
						if ((0xffffffffefffffffL & l) != 0L)
							jjCheckNAddStates(57, 60);
						break;
					case 85:
						if (curChar == 92)
							jjstateSet[jjnewStateCnt++] = 86;
						break;
					case 86:
						if ((0x14404410000000L & l) != 0L)
							jjCheckNAddStates(57, 60);
						break;
					case 93:
						if ((0x20000000200L & l) != 0L)
							jjAddStates(101, 103);
						break;
					case 94:
						if ((0x20000000200L & l) != 0L && kind > 66)
							kind = 66;
						break;
					case 95:
					case 98:
						if ((0x4000000040000L & l) != 0L)
							jjCheckNAdd(94);
						break;
					case 96:
						if ((0x20000000200L & l) != 0L)
							jjstateSet[jjnewStateCnt++] = 95;
						break;
					case 97:
						if ((0x8000000080000L & l) != 0L)
							jjstateSet[jjnewStateCnt++] = 96;
						break;
					case 99:
						if ((0x20000000200000L & l) != 0L)
							jjstateSet[jjnewStateCnt++] = 98;
						break;
					case 100:
						if ((0x8000000080000L & l) != 0L)
							jjstateSet[jjnewStateCnt++] = 99;
						break;
					case 102:
						if ((0x7fffffe07fffffeL & l) != 0L)
							jjCheckNAddStates(91, 100);
						break;
					case 103:
						if ((0x7fffffe87fffffeL & l) != 0L)
							jjCheckNAddStates(63, 66);
						break;
					case 104:
						if ((0x7fffffe87fffffeL & l) != 0L)
							jjCheckNAdd(105);
						break;
					case 106:
						if (curChar == 92)
							jjAddStates(110, 111);
						break;
					case 107:
						if ((0x4000000080000001L & l) != 0L)
							jjCheckNAddStates(63, 66);
						break;
					case 109:
						if ((0x7e0000007eL & l) != 0L)
							jjstateSet[jjnewStateCnt++] = 110;
						break;
					case 110:
						if ((0x7e0000007eL & l) != 0L)
							jjCheckNAddStates(63, 66);
						break;
					case 111:
						if ((0x7e0000007eL & l) != 0L)
							jjstateSet[jjnewStateCnt++] = 112;
						break;
					case 112:
						if ((0x7e0000007eL & l) != 0L)
							jjCheckNAdd(105);
						break;
					case 113:
						if ((0x4000000080000001L & l) != 0L)
							jjCheckNAdd(105);
						break;
					case 114:
						if ((0x7fffffe87fffffeL & l) != 0L)
							jjCheckNAddStates(69, 72);
						break;
					case 115:
						if ((0x7fffffe87fffffeL & l) != 0L)
							jjCheckNAdd(116);
						break;
					case 117:
						if ((0x7fffffe87fffffeL & l) == 0L)
							break;
						if (kind > 144)
							kind = 144;
						jjCheckNAddStates(73, 76);
						break;
					case 118:
						if ((0x7fffffe87fffffeL & l) != 0L)
							jjCheckNAddStates(73, 76);
						break;
					case 119:
						if ((0x7fffffe87fffffeL & l) != 0L && kind > 144)
							kind = 144;
						break;
					case 121:
					case 126:
						if ((0x7e0000007eL & l) != 0L)
							jjCheckNAdd(122);
						break;
					case 122:
						if ((0x7e0000007eL & l) != 0L)
							jjCheckNAddStates(73, 76);
						break;
					case 123:
						if (curChar == 92)
							jjAddStates(112, 115);
						break;
					case 124:
						if ((0x4000000080000001L & l) != 0L)
							jjCheckNAddStates(73, 76);
						break;
					case 125:
						if ((0x4000000080000001L & l) != 0L && kind > 144)
							kind = 144;
						break;
					case 127:
					case 129:
						if ((0x7e0000007eL & l) != 0L)
							jjCheckNAdd(128);
						break;
					case 128:
						if ((0x7e0000007eL & l) != 0L && kind > 144)
							kind = 144;
						break;
					case 130:
						if (curChar == 92)
							jjstateSet[jjnewStateCnt++] = 131;
						break;
					case 131:
						if ((0x4000000080000001L & l) == 0L)
							break;
						if (kind > 144)
							kind = 144;
						jjCheckNAddStates(73, 76);
						break;
					case 133:
						if ((0x7e0000007eL & l) != 0L)
							jjstateSet[jjnewStateCnt++] = 134;
						break;
					case 134:
						if ((0x7e0000007eL & l) == 0L)
							break;
						if (kind > 144)
							kind = 144;
						jjCheckNAddStates(73, 76);
						break;
					case 135:
						if (curChar == 92)
							jjAddStates(116, 117);
						break;
					case 136:
						if ((0x4000000080000001L & l) != 0L)
							jjCheckNAddStates(69, 72);
						break;
					case 138:
						if ((0x7e0000007eL & l) != 0L)
							jjstateSet[jjnewStateCnt++] = 139;
						break;
					case 139:
						if ((0x7e0000007eL & l) != 0L)
							jjCheckNAddStates(69, 72);
						break;
					case 140:
						if ((0x7e0000007eL & l) != 0L)
							jjstateSet[jjnewStateCnt++] = 141;
						break;
					case 141:
						if ((0x7e0000007eL & l) != 0L)
							jjCheckNAdd(116);
						break;
					case 142:
						if ((0x4000000080000001L & l) != 0L)
							jjCheckNAdd(116);
						break;
					case 152:
						if ((0x2000000020L & l) != 0L)
							jjAddStates(118, 119);
						break;
					case 156:
						if ((0x2000000020L & l) != 0L)
							jjAddStates(120, 121);
						break;
					case 168:
						if ((0x2000000020L & l) != 0L)
							jjAddStates(122, 123);
						break;
					case 175:
						if ((0x2000000020L & l) != 0L)
							jjAddStates(124, 125);
						break;
					case 179:
						if ((0x2000000020L & l) != 0L)
							jjAddStates(126, 127);
						break;
					case 191:
						if ((0x2000000020L & l) != 0L)
							jjAddStates(128, 129);
						break;
					case 198:
						if ((0x2000000020L & l) != 0L)
							jjAddStates(130, 131);
						break;
					case 202:
						if ((0x2000000020L & l) != 0L)
							jjAddStates(132, 133);
						break;
					case 208:
						if ((0x2000000020L & l) != 0L)
							jjAddStates(134, 135);
						break;
					default:
						break;
					}
				} while (i != startsAt);
			} else {
				int hiByte = (int) (curChar >> 8);
				int i1 = hiByte >> 6;
				long l1 = 1L << (hiByte & 077);
				int i2 = (curChar & 0xff) >> 6;
				long l2 = 1L << (curChar & 077);
				do {
					switch (jjstateSet[--i]) {
					case 0:
						if (jjCanMove_1(hiByte, i1, i2, l1, l2))
							jjCheckNAddStates(91, 100);
						break;
					case 2:
						if (!jjCanMove_0(hiByte, i1, i2, l1, l2))
							break;
						if (kind > 3)
							kind = 3;
						jjstateSet[jjnewStateCnt++] = 2;
						break;
					case 13:
						if (jjCanMove_0(hiByte, i1, i2, l1, l2))
							jjAddStates(104, 105);
						break;
					case 16:
						if (!jjCanMove_1(hiByte, i1, i2, l1, l2))
							break;
						if (kind > 145)
							kind = 145;
						jjCheckNAddStates(37, 40);
						break;
					case 17:
						if (jjCanMove_2(hiByte, i1, i2, l1, l2))
							jjCheckNAddStates(37, 40);
						break;
					case 18:
						if (jjCanMove_2(hiByte, i1, i2, l1, l2) && kind > 145)
							kind = 145;
						break;
					case 36:
						if (!jjCanMove_1(hiByte, i1, i2, l1, l2))
							break;
						if (kind > 146)
							kind = 146;
						jjCheckNAddStates(45, 47);
						break;
					case 37:
						if (!jjCanMove_2(hiByte, i1, i2, l1, l2))
							break;
						if (kind > 146)
							kind = 146;
						jjCheckNAddStates(45, 47);
						break;
					case 47:
						if (!jjCanMove_1(hiByte, i1, i2, l1, l2))
							break;
						if (kind > 147)
							kind = 147;
						jjCheckNAddStates(48, 50);
						break;
					case 48:
						if (!jjCanMove_2(hiByte, i1, i2, l1, l2))
							break;
						if (kind > 147)
							kind = 147;
						jjCheckNAddStates(48, 50);
						break;
					case 62:
						if (jjCanMove_0(hiByte, i1, i2, l1, l2))
							jjAddStates(29, 31);
						break;
					case 67:
						if (jjCanMove_0(hiByte, i1, i2, l1, l2))
							jjAddStates(26, 28);
						break;
					case 73:
						if (jjCanMove_0(hiByte, i1, i2, l1, l2))
							jjAddStates(51, 54);
						break;
					case 84:
						if (jjCanMove_0(hiByte, i1, i2, l1, l2))
							jjAddStates(57, 60);
						break;
					case 103:
						if (jjCanMove_2(hiByte, i1, i2, l1, l2))
							jjCheckNAddStates(63, 66);
						break;
					case 104:
						if (jjCanMove_2(hiByte, i1, i2, l1, l2))
							jjCheckNAdd(105);
						break;
					case 114:
						if (jjCanMove_2(hiByte, i1, i2, l1, l2))
							jjCheckNAddStates(69, 72);
						break;
					case 115:
						if (jjCanMove_2(hiByte, i1, i2, l1, l2))
							jjCheckNAdd(116);
						break;
					case 117:
						if (!jjCanMove_1(hiByte, i1, i2, l1, l2))
							break;
						if (kind > 144)
							kind = 144;
						jjCheckNAddStates(73, 76);
						break;
					case 118:
						if (jjCanMove_2(hiByte, i1, i2, l1, l2))
							jjCheckNAddStates(73, 76);
						break;
					case 119:
						if (jjCanMove_2(hiByte, i1, i2, l1, l2) && kind > 144)
							kind = 144;
						break;
					default:
						break;
					}
				} while (i != startsAt);
			}
			if (kind != 0x7fffffff) {
				jjmatchedKind = kind;
				jjmatchedPos = curPos;
				kind = 0x7fffffff;
			}
			++curPos;
			if ((i = jjnewStateCnt) == (startsAt = 211 - (jjnewStateCnt = startsAt)))
				break;
			try {
				curChar = input_stream.readChar();
			} catch (java.io.IOException e) {
				break;
			}
		}
		if (jjmatchedPos > strPos)
			return curPos;

		int toRet = Math.max(curPos, seenUpto);

		if (curPos < toRet)
			for (i = toRet - Math.min(curPos, seenUpto); i-- > 0;)
				try {
					curChar = input_stream.readChar();
				} catch (java.io.IOException e) {
					throw new Error(
							"Internal Error : Please send a bug report.");
				}

		if (jjmatchedPos < strPos) {
			jjmatchedKind = strKind;
			jjmatchedPos = strPos;
		} else if (jjmatchedPos == strPos && jjmatchedKind > strKind)
			jjmatchedKind = strKind;

		return toRet;
	}

	static final int[] jjnextStates = { 145, 146, 147, 149, 150, 155, 156, 183,
			184, 187, 189, 194, 160, 161, 164, 166, 171, 117, 130, 132, 47, 54,
			55, 36, 43, 44, 67, 68, 70, 62, 63, 65, 7, 8, 16, 29, 31, 17, 18,
			19, 22, 20, 25, 26, 28, 37, 38, 41, 48, 49, 52, 72, 73, 74, 76, 77,
			79, 83, 84, 85, 87, 88, 90, 103, 104, 106, 108, 109, 111, 114, 115,
			135, 137, 118, 119, 120, 123, 121, 126, 127, 129, 138, 140, 172,
			173, 178, 179, 195, 196, 201, 202, 103, 104, 105, 114, 115, 116,
			135, 137, 106, 108, 97, 100, 101, 13, 14, 23, 23, 24, 24, 107, 113,
			124, 124, 125, 125, 136, 142, 153, 154, 157, 158, 169, 170, 176,
			177, 180, 181, 192, 193, 199, 200, 203, 204, 209, 210, };

	private static final boolean jjCanMove_0(int hiByte, int i1, int i2,
			long l1, long l2) {
		switch (hiByte) {
		case 0:
			return ((jjbitVec2[i2] & l2) != 0L);
		default:
			if ((jjbitVec0[i1] & l1) != 0L)
				return true;
			return false;
		}
	}

	private static final boolean jjCanMove_1(int hiByte, int i1, int i2,
			long l1, long l2) {
		switch (hiByte) {
		case 0:
			return ((jjbitVec4[i2] & l2) != 0L);
		case 3:
			return ((jjbitVec5[i2] & l2) != 0L);
		case 32:
			return ((jjbitVec6[i2] & l2) != 0L);
		case 33:
			return ((jjbitVec7[i2] & l2) != 0L);
		case 47:
			return ((jjbitVec8[i2] & l2) != 0L);
		case 48:
			return ((jjbitVec0[i2] & l2) != 0L);
		case 253:
			return ((jjbitVec9[i2] & l2) != 0L);
		case 255:
			return ((jjbitVec10[i2] & l2) != 0L);
		default:
			if ((jjbitVec3[i1] & l1) != 0L)
				return true;
			return false;
		}
	}

	private static final boolean jjCanMove_2(int hiByte, int i1, int i2,
			long l1, long l2) {
		switch (hiByte) {
		case 0:
			return ((jjbitVec11[i2] & l2) != 0L);
		case 3:
			return ((jjbitVec12[i2] & l2) != 0L);
		case 32:
			return ((jjbitVec13[i2] & l2) != 0L);
		case 33:
			return ((jjbitVec7[i2] & l2) != 0L);
		case 47:
			return ((jjbitVec8[i2] & l2) != 0L);
		case 48:
			return ((jjbitVec0[i2] & l2) != 0L);
		case 253:
			return ((jjbitVec9[i2] & l2) != 0L);
		case 255:
			return ((jjbitVec10[i2] & l2) != 0L);
		default:
			if ((jjbitVec3[i1] & l1) != 0L)
				return true;
			return false;
		}
	}

	/** Token literal values. */
	public static final String[] jjstrLiteralImages = { "", null, null, null,
			"\50", "\51", "\173", "\175", "\133", "\135", "\73", "\54", "\56",
			"\75", "\41\75", "\76", "\74", "\74\75", "\76\75", "\41",
			"\174\174", "\46\46", "\53", "\55", "\52", "\77", "\57", "\174",
			"\136", "\136\136", null, null, "\141", null, null, null, null,
			null, null, null, null, null, null, null, null, null, null, null,
			null, null, null, null, null, null, null, null, null, null, null,
			null, null, null, null, null, null, null, null, null, null, null,
			null, null, null, null, null, null, null, null, null, null, null,
			null, null, null, null, null, null, null, null, null, null, null,
			null, null, null, null, null, null, null, null, null, null, null,
			null, null, null, null, null, null, null, null, null, null, null,
			null, null, null, null, null, null, null, null, null, null, null,
			null, null, null, null, null, null, null, null, null, null, null,
			null, null, null, null, null, null, null, null, null, null, null,
			null, null, null, null, null, null, null, null, null, null, null,
			null, null, null, null, null, null, null, null, null, null, null,
			null, null, null, null, null, null, null, null, null, null, null,
			null, null, null, null, null, null, null, null, };

	/** Lexer state names. */
	public static final String[] lexStateNames = { "DEFAULT", };
	static final long[] jjtoToken = { 0xfffffffffffffff1L, 0xffffffffffffffffL,
			0xfc39ffffffL, };
	static final long[] jjtoSkip = { 0xcL, 0x0L, 0x0L, };
	static final long[] jjtoSpecial = { 0x8L, 0x0L, 0x0L, };
	protected JavaCharStream input_stream;
	private final int[] jjrounds = new int[211];
	private final int[] jjstateSet = new int[422];
	protected char curChar;

	/** Constructor. */
	public SyntaxTreeBuilderTokenManager(JavaCharStream stream) {
		if (JavaCharStream.staticFlag)
			throw new Error(
					"ERROR: Cannot use a static CharStream class with a non-static lexical analyzer.");
		input_stream = stream;
	}

	/** Constructor. */
	public SyntaxTreeBuilderTokenManager(JavaCharStream stream, int lexState) {
		this(stream);
		SwitchTo(lexState);
	}

	/** Reinitialise parser. */
	public void ReInit(JavaCharStream stream) {
		jjmatchedPos = jjnewStateCnt = 0;
		curLexState = defaultLexState;
		input_stream = stream;
		ReInitRounds();
	}

	private void ReInitRounds() {
		int i;
		jjround = 0x80000001;
		for (i = 211; i-- > 0;)
			jjrounds[i] = 0x80000000;
	}

	/** Reinitialise parser. */
	public void ReInit(JavaCharStream stream, int lexState) {
		ReInit(stream);
		SwitchTo(lexState);
	}

	/** Switch to specified lex state. */
	public void SwitchTo(int lexState) {
		if (lexState >= 1 || lexState < 0)
			throw new TokenMgrError("Error: Ignoring invalid lexical state : "
					+ lexState + ". State unchanged.",
					TokenMgrError.INVALID_LEXICAL_STATE);
		else
			curLexState = lexState;
	}

	protected Token jjFillToken() {
		final Token t;
		final String curTokenImage;
		final int beginLine;
		final int endLine;
		final int beginColumn;
		final int endColumn;
		String im = jjstrLiteralImages[jjmatchedKind];
		curTokenImage = (im == null) ? input_stream.GetImage() : im;
		beginLine = input_stream.getBeginLine();
		beginColumn = input_stream.getBeginColumn();
		endLine = input_stream.getEndLine();
		endColumn = input_stream.getEndColumn();
		t = Token.newToken(jjmatchedKind, curTokenImage);

		t.beginLine = beginLine;
		t.endLine = endLine;
		t.beginColumn = beginColumn;
		t.endColumn = endColumn;

		return t;
	}

	int curLexState = 0;
	int defaultLexState = 0;
	int jjnewStateCnt;
	int jjround;
	int jjmatchedPos;
	int jjmatchedKind;

	/** Get the next Token. */
	public Token getNextToken() {
		Token specialToken = null;
		Token matchedToken;
		int curPos = 0;

		EOFLoop: for (;;) {
			try {
				curChar = input_stream.BeginToken();
			} catch (java.io.IOException e) {
				jjmatchedKind = 0;
				matchedToken = jjFillToken();
				matchedToken.specialToken = specialToken;
				return matchedToken;
			}

			jjmatchedKind = 0x7fffffff;
			jjmatchedPos = 0;
			curPos = jjMoveStringLiteralDfa0_0();
			if (jjmatchedKind != 0x7fffffff) {
				if (jjmatchedPos + 1 < curPos)
					input_stream.backup(curPos - jjmatchedPos - 1);
				if ((jjtoToken[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L) {
					matchedToken = jjFillToken();
					matchedToken.specialToken = specialToken;
					return matchedToken;
				} else {
					if ((jjtoSpecial[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L) {
						matchedToken = jjFillToken();
						if (specialToken == null)
							specialToken = matchedToken;
						else {
							matchedToken.specialToken = specialToken;
							specialToken = (specialToken.next = matchedToken);
						}
					}
					continue EOFLoop;
				}
			}
			int error_line = input_stream.getEndLine();
			int error_column = input_stream.getEndColumn();
			String error_after = null;
			boolean EOFSeen = false;
			try {
				input_stream.readChar();
				input_stream.backup(1);
			} catch (java.io.IOException e1) {
				EOFSeen = true;
				error_after = curPos <= 1 ? "" : input_stream.GetImage();
				if (curChar == '\n' || curChar == '\r') {
					error_line++;
					error_column = 0;
				} else
					error_column++;
			}
			if (!EOFSeen) {
				input_stream.backup(1);
				error_after = curPos <= 1 ? "" : input_stream.GetImage();
			}
			throw new TokenMgrError(EOFSeen, curLexState, error_line,
					error_column, error_after, curChar,
					TokenMgrError.LEXICAL_ERROR);
		}
	}

	private void jjCheckNAdd(int state) {
		if (jjrounds[state] != jjround) {
			jjstateSet[jjnewStateCnt++] = state;
			jjrounds[state] = jjround;
		}
	}

	private void jjAddStates(int start, int end) {
		do {
			jjstateSet[jjnewStateCnt++] = jjnextStates[start];
		} while (start++ != end);
	}

	private void jjCheckNAddTwoStates(int state1, int state2) {
		jjCheckNAdd(state1);
		jjCheckNAdd(state2);
	}

	private void jjCheckNAddStates(int start, int end) {
		do {
			jjCheckNAdd(jjnextStates[start]);
		} while (start++ != end);
	}

}
